"use client"

import React from "react"
import { DialogFooter } from "@/components/ui/dialog"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

import { useState, useEffect } from "react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Switch } from "@/components/ui/switch"
import { Progress } from "@/components/ui/progress"
import { Collapsible, CollapsibleContent } from "@/components/ui/collapsible"
import {
  DollarSign,
  FileText,
  Mail,
  Receipt,
  Settings,
  Eye,
  Download,
  Building,
  CheckCircle,
  AlertCircle,
  Zap,
  ExternalLink,
  FolderSyncIcon as Sync,
  Database,
  FileSpreadsheet,
  Send,
  Clock,
  MoreVertical,
  CreditCard,
  TrendingUp,
  MessageSquare,
  CheckCircle2,
  XCircle,
  Filter,
  Search,
  User,
  Calendar,
  Folder,
  Phone,
  Home,
  Trash2,
  StickyNote,
  ChevronRight,
  Paperclip,
  Sparkles,
  DownloadCloud,
  ArrowDown,
  ArrowRight,
  ArrowUp,
  Plus,
  Pencil,
  BarChart3,
  Award,
  AlertTriangle,
  ChevronDown,
  Edit,
  BookOpen
} from "lucide-react"
import { cn } from "@/lib/utils"
import { useRouter } from 'next/navigation'
import { BarChart, Bar, XAxis, YAxis, Tooltip as RechartsTooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line } from 'recharts';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetDescription } from '@/components/ui/sheet';
import { jobsList, activityMilestones, jobNotes, activityFiles } from './mockData';

// Sample staff list
const staffList = [
  { id: 'tech1', name: 'Alice Johnson', phone: '555-111-2222', email: 'alice.johnson@email.com' },
  { id: 'tech2', name: 'Bob Martinez', phone: '555-333-4444', email: 'bob.martinez@email.com' },
  { id: 'tech3', name: 'Carlos Lee', phone: '555-555-6666', email: 'carlos.lee@email.com' },
]

// Add transactions type and data near the top with other data definitions
type Transaction = {
  id: string
  date: string
  vendor: string
  amount: number
  status: 'reconciled' | 'pending'
  billable: boolean
  jobId: string
  madeBy: string
  cardHolder?: string // Add card holder information
  memo?: string
  receipt?: string
}

const transactionsList: Transaction[] = [
  {
    id: 'txn1',
    date: '2024-03-15',
    vendor: 'Home Depot',
    amount: 150.00,
    status: 'reconciled',
    billable: true,
    jobId: 'job1',
    madeBy: 'John Smith',
    cardHolder: 'John Smith',
    memo: 'HVAC parts',
    receipt: 'receipt1.pdf'
  },
  {
    id: 'txn2',
    date: '2024-03-16',
    vendor: 'Lowes',
    amount: 75.50,
    status: 'pending',
    billable: true,
    jobId: 'job1',
    madeBy: 'Sarah Johnson',
    cardHolder: 'Sarah Johnson',
    memo: 'Paint supplies',
    receipt: 'receipt2.pdf'
  },
  {
    id: 'txn3',
    date: '2024-03-17',
    vendor: 'Ace Hardware',
    amount: 45.25,
    status: 'reconciled',
    billable: false,
    jobId: 'job1',
    madeBy: 'Alice Johnson',
    cardHolder: 'Alice Johnson',
    memo: 'Tools',
    receipt: 'receipt3.pdf'
  },
  {
    id: 'txn4',
    date: '2024-03-18',
    vendor: 'Office Depot',
    amount: 125.75,
    status: 'pending',
    billable: true,
    jobId: 'job2',
    madeBy: 'Mike Chen',
    cardHolder: 'Mike Chen',
    memo: 'Office supplies',
    receipt: 'receipt4.pdf'
  },
  {
    id: 'txn5',
    date: '2024-03-19',
    vendor: 'Staples',
    amount: 89.99,
    status: 'reconciled',
    billable: false,
    jobId: 'job2',
    madeBy: 'Lisa Wong',
    cardHolder: 'Lisa Wong',
    memo: 'Paper and ink',
    receipt: 'receipt5.pdf'
  }
]

// Add type for milestone ownership
type MilestoneOwner = 'PM' | 'Technician' | 'Central Office';

// Remove the local activityMilestones array definition (lines 113-152)
// The activityMilestones is now imported from './mockData'

// Add 'Work Order Update' after 'Work Started' in activityMilestones
const workStartedIndex = activityMilestones.findIndex(m => m.milestone === 'Work Started');
let activityMilestonesWithUpdate: typeof activityMilestones = [];
if (workStartedIndex !== -1) {
  activityMilestonesWithUpdate = [
    ...activityMilestones.slice(0, workStartedIndex + 1),
    { milestone: 'Work Order Update', owner: 'PM' as MilestoneOwner, description: 'General update to work order', responsibility: 'Any update or note related to the work order' },
    ...activityMilestones.slice(workStartedIndex + 1)
  ];
} else {
  activityMilestonesWithUpdate = [
    ...activityMilestones,
    { milestone: 'Work Order Update', owner: 'PM' as MilestoneOwner, description: 'General update to work order', responsibility: 'Any update or note related to the work order' }
  ];
}

export default function PMFinancialDashboard() {
  const [expandedProperty, setExpandedProperty] = useState<string | null>(null)
  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false)
  const [reportDialogOpen, setReportDialogOpen] = useState(false)
  const [selectedProperty, setSelectedProperty] = useState<any>(null)
  const [newMessage, setNewMessage] = useState("")
  const [selectedThread, setSelectedThread] = useState<string | null>(null)
  const [approvalFilter, setApprovalFilter] = useState("all")
  const [approvalSearch, setApprovalSearch] = useState("")
  const [selectedApproval, setSelectedApproval] = useState<any>(null)
  const [approvalDialogOpen, setApprovalDialogOpen] = useState(false)
  const [activeTab, setActiveTab] = useState("dashboard")
  const [newJobDialogOpen, setNewJobDialogOpen] = useState(false)
  const [newPropertyDialogOpen, setNewPropertyDialogOpen] = useState(false)
  const [importAppFolioDialogOpen, setImportAppFolioDialogOpen] = useState(false)
  const [jobViewDialogOpen, setJobViewDialogOpen] = useState(false)
  const [selectedJob, setSelectedJob] = useState<typeof jobsList[0] | null>(null)
  const [jobs, setJobs] = useState(jobsList)
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [jobToDelete, setJobToDelete] = useState<typeof jobsList[0] | null>(null)
  const [editJobDialogOpen, setEditJobDialogOpen] = useState(false)
  const [editJob, setEditJob] = useState<typeof jobsList[0] | null>(null)
  const [staff, setStaff] = useState(staffList)
  const [newStaffDialogOpen, setNewStaffDialogOpen] = useState(false)
  const [editStaffDialogOpen, setEditStaffDialogOpen] = useState(false)
  const [viewStaffJobsDialogOpen, setViewStaffJobsDialogOpen] = useState(false)
  const [viewStaff, setViewStaff] = useState<{ id: string; name: string; phone: string } | null>(null)
  const [editStaff, setEditStaff] = useState<{ id: string; name: string; phone: string } | null>(null)
  const [newStaffName, setNewStaffName] = useState("")
  const [newStaffPhone, setNewStaffPhone] = useState("")
  const [editStaffName, setEditStaffName] = useState("")
  const [editStaffPhone, setEditStaffPhone] = useState("")
  const [expandedStaffId, setExpandedStaffId] = useState<string | null>(null)
  const [walletBillable, setWalletBillable] = useState<{ [key: number]: boolean }>({})
  const [newJobCost, setNewJobCost] = useState(0)
  const [newJobPreApproval, setNewJobPreApproval] = useState<'Required' | 'Not Required'>('Not Required')
  const [approvalJobs, setApprovalJobs] = useState<{ [id: string]: { sentAt: string, status: string, note?: string } }>({})
  // State for pre-approval workflow
  const [showPreApprovalDialog, setShowPreApprovalDialog] = useState(false);
  const [showSendEmailDialog, setShowSendEmailDialog] = useState(false);
  const [pendingJob, setPendingJob] = useState<any>(null);
  // Update role state to include 'centralOffice'
  const [role, setRole] = useState<'pm' | 'technician' | 'centralOffice'>('pm');
  // For demo, use Alice Johnson as the logged-in technician
  const technicianName = 'Alice Johnson';
  const [notesDialogOpen, setNotesDialogOpen] = useState(false);
  const [notesJob, setNotesJob] = useState<any>(null);
  const [newNote, setNewNote] = useState("");
  // Store notes per job (mock for now, can be persisted)
  const [jobNotes, setJobNotes] = useState<{ [jobId: string]: { author: string, content: string, timestamp: string }[] }>({});
  const [pendingAssignments, setPendingAssignments] = useState<{ [txnId: string]: string } | null>(null);
  // Add state for selected job transactions
  const [selectedJobForTransactions, setSelectedJobForTransactions] = useState<typeof jobsList[0] | null>(null);
  // Add state for selected transaction details
  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);
  // Add state for expanded job expenses
  const [expandedJobExpenses, setExpandedJobExpenses] = useState<string | null>(null);
  // Add state for expanded property employees
  const [expandedPropertyEmployees, setExpandedPropertyEmployees] = useState<string | null>(null);
  // Add state for Expenses tab filters
  const [expensesJobFilter, setExpensesJobFilter] = useState<string>('not_assigned');
  const [expensesPropertyFilter, setExpensesPropertyFilter] = useState<string>('not_assigned');
  // Add state for transaction assignments in Expenses tab
  const [txnAssignments, setTxnAssignments] = useState<{ [txnId: string]: { property?: string; job?: string } }>({});
  // Add state for memo and receipt uploads in Expenses tab
  const [txnMemos, setTxnMemos] = useState<{ [txnId: string]: string }>({});
  const [txnReceipts, setTxnReceipts] = useState<{ [txnId: string]: File | null }>({});
  // Add state for Activity tab filters
  const [activityPropertyFilter, setActivityPropertyFilter] = useState<string>('all');
  const [activityJobFilter, setActivityJobFilter] = useState<string>('all');
  const [activityMilestoneFilter, setActivityMilestoneFilter] = useState<string>('all');
  const [activityOwnerFilter, setActivityOwnerFilter] = useState<string>('all');
  // Add state for new activity row in Activity tab
  const [newActivity, setNewActivity] = useState<any | null>(null);
  // Add state for uploaded files in Activity tab
  const [activityFiles, setActivityFiles] = useState<{ [key: string]: File[] }>({});
  // State for Smart Assist chat
  const [smartAssistInput, setSmartAssistInput] = useState("");
  const [smartAssistChat, setSmartAssistChat] = useState<{ role: 'user' | 'assistant', content: string }[]>([]);
  // State for Transactions tab filters
  const [txnFilterStatus, setTxnFilterStatus] = useState<string>('all');
  const [txnFilterBillable, setTxnFilterBillable] = useState<string>('all');
  const [txnFilterProperty, setTxnFilterProperty] = useState<string>('all');
  const [txnFilterJob, setTxnFilterJob] = useState<string>('all');
  const [txnFilterDateFrom, setTxnFilterDateFrom] = useState<string>('');
  const [txnFilterDateTo, setTxnFilterDateTo] = useState<string>('');
  const [txnFilterMadeBy, setTxnFilterMadeBy] = useState<string>('all');
  // State for job timeline modal
  const [timelineJob, setTimelineJob] = useState<typeof jobsList[0] | null>(null);
  const [timelineOpen, setTimelineOpen] = useState(false);
  // State for new work order form
  const [newWorkOrder, setNewWorkOrder] = useState({
    property: '',
    description: '',
    
    notes: '',
    cost: '',
    priority: 'Medium'
  });
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});
  // Add state for new activity dialog
  const [newActivityDialogOpen, setNewActivityDialogOpen] = useState(false);
  const [selectedActivity, setSelectedActivity] = useState("");
  const [activityFile, setActivityFile] = useState<File | null>(null);
  
  // Add state for new expense dialog
  const [newExpenseDialogOpen, setNewExpenseDialogOpen] = useState(false);
  
  // Add state for main expense form (for adding new expenses)
  const [mainExpenseForm, setMainExpenseForm] = useState({
    vendor: '',
    amount: '',
    madeBy: '',
    billable: true,
    memo: '',
    receipt: ''
  });
  
  // Add state for editing expense in form
  const [editingExpense, setEditingExpense] = useState<Transaction | null>(null);
  const [expenseForm, setExpenseForm] = useState({
    property: '',
    job: '',
    billable: true,
    memo: '',
    receipt: '' // store as string
  });
  
  // Add state for edit job form
  const [editJobForm, setEditJobForm] = useState({
    property: '',
    description: '',
    cost: '',
    priority: 'Medium'
  });
  
  // Add state for transactions
  const [transactions, setTransactions] = useState<Transaction[]>(transactionsList);

  // Add state for inline editing of uncategorized expenses
  const [inlineEditingExpense, setInlineEditingExpense] = useState<string | null>(null);
  const [inlineExpenseForm, setInlineExpenseForm] = useState({
    property: '',
    job: '',
    billable: true,
    memo: '',
    receipt: '' // store as string
  });

  // Add state for new transaction form (Central Office)
  const [newTransactionDialogOpen, setNewTransactionDialogOpen] = useState(false);
  const [newTransactionForm, setNewTransactionForm] = useState({
    date: '',
    vendor: '',
    amount: '',
    madeBy: '',
    cardHolder: '',
    property: '',
    job: '',
    billable: true,
    memo: '',
    receipt: ''
  });

  // Add state for transaction review flags
  const [transactionReviewFlags, setTransactionReviewFlags] = useState<{ [txnId: string]: string }>({
    'txn1': 'Missing receipt',
    'txn3': 'Wrong property',
    'txn5': 'Unusual amount',
    'txn7': 'Missing memo'
  });

  // Add state for toggling review table visibility
  const [reviewTableExpanded, setReviewTableExpanded] = useState(false);

  // Add state for editing transactions (Central Office)
  const [editTransactionDialogOpen, setEditTransactionDialogOpen] = useState(false);
  const [editingTransaction, setEditingTransaction] = useState<Transaction | null>(null);
  const [editTransactionForm, setEditTransactionForm] = useState({
    date: '',
    vendor: '',
    amount: '',
    madeBy: '',
    cardHolder: '',
    property: '',
    job: '',
    billable: true,
    memo: '',
    receipt: ''
  });

  // Available activities for PM to add
  const availableActivities = [
    'Work Order Received',
    'Pre-Approval Sent', 
    'Pre-Approval Received',
    'Work Order Update',
    'Work Order Closed'
  ];

  // State for reimbursement functionality
  const [reimbursementDialogOpen, setReimbursementDialogOpen] = useState(false);
  const [selectedReimbursementJob, setSelectedReimbursementJob] = useState<any>(null);
  const [reimbursementAmount, setReimbursementAmount] = useState(0);
  const [reimbursementNote, setReimbursementNote] = useState('');
  
  // State for Policy tab
  const [aiPolicyContent, setAiPolicyContent] = useState(`# AI Expense Policy Guidelines

## General Principles
- All expenses must be reasonable and necessary for business operations
- Receipts are required for all purchases over $25
- Pre-approval required for expenses over $500
- All expenses must be properly categorized as billable or non-billable

## Billable vs Non-Billable Guidelines

### Billable Expenses
- Property-specific repairs and maintenance
- Materials and supplies for work orders
- Emergency repairs (with proper documentation)
- Property-specific tools and equipment

### Non-Billable Expenses
- General office supplies
- Personal tools and equipment
- Non-property-specific expenses
- Administrative costs

## Receipt Requirements
- All receipts must be clear and legible
- Receipts must show date, vendor, items, and total amount
- Digital receipts are acceptable
- Receipts must be uploaded within 48 hours of purchase

## Pre-Approval Process
- Expenses over $500 require pre-approval
- Emergency repairs may be approved after the fact
- All pre-approval requests must include detailed justification
- Response time: within 24 hours during business days`);

  const [policyEditMode, setPolicyEditMode] = useState(false);
  const [expenseQuestions, setExpenseQuestions] = useState([
    { id: 1, question: "Is this expense reasonable and necessary?", answer: null, timestamp: null },
    { id: 2, question: "Should this be billable to the property/owner?", answer: null, timestamp: null },
    { id: 3, question: "Is a receipt required for this purchase?", answer: null, timestamp: null },
    { id: 4, question: "Does this require pre-approval?", answer: null, timestamp: null },
    { id: 5, question: "Is this an emergency repair?", answer: null, timestamp: null },
    { id: 6, question: "Is this a property-specific expense?", answer: null, timestamp: null },
    { id: 7, question: "Is this a recurring expense?", answer: null, timestamp: null },
    { id: 8, question: "Is this expense within budget?", answer: null, timestamp: null }
  ]);
  const [newQuestionDialogOpen, setNewQuestionDialogOpen] = useState(false);
  const [newQuestion, setNewQuestion] = useState({ question: '', category: 'general' });

  // State for help request functionality
  const [helpRequestDialogOpen, setHelpRequestDialogOpen] = useState(false);
  const [helpRequestForm, setHelpRequestForm] = useState({
    expenseId: 'none',
    question: '',
    urgency: 'normal',
    additionalDetails: ''
  });
  const [helpRequests, setHelpRequests] = useState<{
    id: string;
    expenseId: string;
    technicianName: string;
    question: string;
    urgency: 'low' | 'normal' | 'high';
    additionalDetails: string;
    status: 'pending' | 'answered' | 'resolved';
    createdAt: string;
    answeredAt?: string;
    answer?: string;
  }[]>([]);

  // State for help request response dialog
  const [responseDialogOpen, setResponseDialogOpen] = useState(false);
  const [selectedHelpRequest, setSelectedHelpRequest] = useState<any>(null);
  const [responseForm, setResponseForm] = useState({
    answer: '',
    decisionTrackerAnswers: {
      'Is this expense reasonable and necessary?': null,
      'Should this be billable to the property/owner?': null,
      'Is a receipt required?': null,
      'Does this require pre-approval?': null,
      'Is this an emergency repair?': null,
      'Is this a capital improvement?': null,
      'Should this be reimbursed?': null,
      'Is this within budget limits?': null
    }
  });

  // State for expanded work orders in payments tab
  const [expandedWorkOrders, setExpandedWorkOrders] = useState<Set<string>>(new Set());
  
  // State for monthly reports
  const [monthlyReportDialogOpen, setMonthlyReportDialogOpen] = useState(false);
  const [selectedReportProperty, setSelectedReportProperty] = useState<any>(null);
  const [reportMonth, setReportMonth] = useState(new Date().toISOString().slice(0, 7)); // YYYY-MM format

  // Handle URL parameters for tab navigation
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const tabParam = urlParams.get('tab');
    if (tabParam && ['dashboard', 'workorders', 'activity', 'wallet', 'transactions', 'properties', 'staff', 'payments'].includes(tabParam)) {
      setActiveTab(tabParam);
    }
  }, []);

  // Mock data for technicians
  const technicians = [
    { id: 'tech1', name: 'John Smith' },
    { id: 'tech2', name: 'Sarah Johnson' },
    { id: 'tech3', name: 'Mike Wilson' }
  ];

  const properties = [
    {
      id: "stanford",
      name: "Stanford GSB",
      address: "655 Knight Way, Stanford, CA",
      totalBalance: 1250.0,
      cardCount: 2,
      pendingBills: 3,
      trustBalance: 15420.5,
      lastSync: "2 hours ago",
      qboStatus: "synced",
      reconciliationStatus: "balanced",
      pendingTransactions: 5,
      lastReport: "Jan 15, 2024",
      ownerEmail: "owner@stanford.edu",
      staff: [
        { name: "Linda Evans", role: "Receptionist", phone: "555-101-2020", email: "linda.evans@stanford.edu" },
        { name: "Mark Lee", role: "Property Manager", phone: "555-303-4040", email: "mark.lee@stanford.edu" },
        { name: "Carlos Ramirez", role: "Maintenance Technician", phone: "555-111-2222", email: "carlos.ramirez@stanford.edu" },
        { name: "Janet Kim", role: "Porter / Janitor", phone: "555-333-4444", email: "janet.kim@stanford.edu" },
        { name: "Samantha Green", role: "Leasing Agent", phone: "555-555-6666", email: "samantha.green@stanford.edu" },
        { name: "Alexis Chen", role: "Concierge / Front Desk", phone: "555-777-8888", email: "alexis.chen@stanford.edu" },
        { name: "Robert King", role: "Security Guard", phone: "555-999-0000", email: "robert.king@stanford.edu" }
      ],
      cards: [
        { id: "1", number: "**** 4532", holder: "John Smith", balance: 635.0, status: "active" },
        { id: "2", number: "**** 7891", holder: "Sarah Johnson", balance: 615.0, status: "active" },
      ],
      recentActivity: [
        { type: "expense", description: "Home Depot purchase", amount: 635.0, date: "2 hours ago" },
        { type: "payment", description: "Trust transfer", amount: 1200.0, date: "1 day ago" },
        { type: "report", description: "Monthly statement sent", amount: 0, date: "3 days ago" },
      ],
      transactions: [
        {
          id: "1",
          date: "2024-01-15",
          vendor: "Home Depot",
          amount: 635.0,
          category: "Repairs & Maintenance",
          status: "pending",
          receipt: true,
        },
        {
          id: "2",
          date: "2024-01-14",
          vendor: "Trader Joe's",
          amount: 51.91,
          category: "Office Supplies",
          status: "reconciled",
          receipt: true,
        },
      ],
    },
    {
      id: "sunnyvale",
      name: "Sunnyvale 432",
      address: "432 Sunnyvale Ave, Sunnyvale, CA",
      totalBalance: 2991.25,
      cardCount: 2,
      pendingBills: 5,
      trustBalance: 28750.75,
      lastSync: "5 minutes ago",
      qboStatus: "synced",
      reconciliationStatus: "balanced",
      pendingTransactions: 8,
      lastReport: "Jan 10, 2024",
      ownerEmail: "owner@sunnyvale.com",
      staff: [
        { name: "Maria Gomez", role: "Receptionist", phone: "555-505-6060", email: "maria.gomez@sunnyvale.com" },
        { name: "James Wu", role: "Property Manager", phone: "555-707-8080", email: "james.wu@sunnyvale.com" },
        { name: "Miguel Torres", role: "Maintenance Technician", phone: "555-121-2323", email: "miguel.torres@sunnyvale.com" },
        { name: "Patricia Lee", role: "Porter / Janitor", phone: "555-343-4545", email: "patricia.lee@sunnyvale.com" },
        { name: "Emily Brown", role: "Leasing Agent", phone: "555-565-6767", email: "emily.brown@sunnyvale.com" },
        { name: "Brian Smith", role: "Concierge / Front Desk", phone: "555-787-8989", email: "brian.smith@sunnyvale.com" },
        { name: "Angela White", role: "Security Guard", phone: "555-909-1011", email: "angela.white@sunnyvale.com" }
      ],
      cards: [
        { id: "3", number: "**** 2345", holder: "Mike Chen", balance: 1200.0, status: "active" },
        { id: "4", number: "**** 6789", holder: "Lisa Wong", balance: 1791.25, status: "active" },
      ],
      recentActivity: [
        { type: "expense", description: "Lowe's purchase", amount: 289.5, date: "1 hour ago" },
        { type: "expense", description: "Office Depot", amount: 125.75, date: "6 hours ago" },
        { type: "sync", description: "QuickBooks sync", amount: 0, date: "5 minutes ago" },
      ],
      transactions: [
        {
          id: "3",
          date: "2024-01-14",
          vendor: "Lowe's",
          amount: 289.5,
          category: "Repairs & Maintenance",
          status: "pending",
          receipt: false,
        },
        {
          id: "4",
          date: "2024-01-13",
          vendor: "Office Depot",
          amount: 125.75,
          category: "Office Supplies",
          status: "reconciled",
          receipt: true,
        },
      ],
    },
    {
      id: "downtown",
      name: "Downtown Lofts",
      address: "123 Market St, San Francisco, CA",
      totalBalance: 450.0,
      cardCount: 1,
      pendingBills: 2,
      trustBalance: 12300.0,
      lastSync: "1 hour ago",
      qboStatus: "pending",
      reconciliationStatus: "variance",
      pendingTransactions: 3,
      lastReport: "Jan 8, 2024",
      ownerEmail: "owner@downtownlofts.com",
      staff: [
        { name: "Sophie Tran", role: "Receptionist", phone: "555-909-1010", email: "sophie.tran@downtownlofts.com" },
        { name: "David Kim", role: "Property Manager", phone: "555-111-2121", email: "david.kim@downtownlofts.com" },
        { name: "Oscar Martinez", role: "Maintenance Technician", phone: "555-232-3434", email: "oscar.martinez@downtownlofts.com" },
        { name: "Grace Lin", role: "Porter / Janitor", phone: "555-454-5656", email: "grace.lin@downtownlofts.com" },
        { name: "Kevin Patel", role: "Leasing Agent", phone: "555-676-7878", email: "kevin.patel@downtownlofts.com" },
        { name: "Tina Brooks", role: "Concierge / Front Desk", phone: "555-898-9090", email: "tina.brooks@downtownlofts.com" },
        { name: "Victor Cruz", role: "Security Guard", phone: "555-101-1121", email: "victor.cruz@downtownlofts.com" }
      ],
      cards: [{ id: "5", number: "**** 9876", holder: "Alex Rodriguez", balance: 450.0, status: "active" }],
      recentActivity: [
        { type: "expense", description: "Ace Hardware", amount: 89.99, date: "3 hours ago" },
        { type: "alert", description: "Trust reconciliation variance", amount: 0, date: "1 day ago" },
      ],
      transactions: [
        {
          id: "5",
          date: "2024-01-12",
          vendor: "Ace Hardware",
          amount: 89.99,
          category: "Repairs & Maintenance",
          status: "pending",
          receipt: true,
        },
      ],
    },
  ]

  // Mock data for communications
  const communications = {
    messages: [
      {
        id: "1",
        propertyId: "stanford",
        senderId: "owner1",
        senderName: "John Smith",
        senderRole: "owner",
        content: "Can you approve the new HVAC maintenance request?",
        timestamp: new Date("2024-01-20T10:00:00"),
        status: "unread",
        threadId: "thread1"
      },
      {
        id: "2",
        propertyId: "stanford",
        senderId: "pm1",
        senderName: "Property Manager",
        senderRole: "pm",
        content: "I've reviewed the request. The quote seems reasonable.",
        timestamp: new Date("2024-01-20T10:30:00"),
        status: "read",
        threadId: "thread1"
      }
    ],
    approvals: [
      {
        id: "1",
        propertyId: "stanford",
        type: "maintenance",
        status: "pending",
        requestedBy: "John Smith",
        requestedAt: new Date("2024-01-20T09:00:00"),
        amount: 2500,
        description: "HVAC System Maintenance - Annual Service",
        priority: "high",
        comments: [],
        vendor: "ABC HVAC Services",
        category: "Maintenance"
      },
      {
        id: "2",
        propertyId: "sunnyvale",
        type: "expense",
        status: "pending",
        requestedBy: "Mike Chen",
        requestedAt: new Date("2024-01-20T08:30:00"),
        amount: 850,
        description: "Emergency Plumbing Repair - Kitchen Sink",
        priority: "high",
        comments: [],
        vendor: "Quick Plumb Inc",
        category: "Repairs"
      },
      {
        id: "3",
        propertyId: "downtown",
        type: "document",
        status: "approved",
        requestedBy: "Alex Rodriguez",
        requestedAt: new Date("2024-01-19T15:00:00"),
        description: "New Lease Agreement Review",
        priority: "medium",
        comments: [],
        category: "Documentation"
      }
    ]
  }

  // Mock data for property approvals
  const propertyApprovals = {
    approvals: [
      {
        id: "1",
        propertyId: "stanford",
        propertyName: "Stanford GSB",
        ownerName: "John Smith",
        ownerEmail: "owner@stanford.edu",
        type: "maintenance",
        status: "pending",
        requestedAt: new Date("2024-01-20T09:00:00"),
        dueDate: new Date("2024-01-25T00:00:00"),
        amount: 2500,
        description: "HVAC System Maintenance - Annual Service",
        priority: "high",
        vendor: "ABC HVAC Services",
        category: "Maintenance",
        details: "Annual maintenance service for the HVAC system. Includes filter replacement, system inspection, and performance optimization.",
        attachments: ["quote.pdf", "maintenance_contract.pdf"],
        comments: [
          {
            id: "1",
            author: "Property Manager",
            content: "Received quote from vendor. Awaiting owner approval.",
            timestamp: new Date("2024-01-20T09:30:00")
          }
        ]
      },
      {
        id: "2",
        propertyId: "sunnyvale",
        propertyName: "Sunnyvale 432",
        ownerName: "Mike Chen",
        ownerEmail: "owner@sunnyvale.com",
        type: "repair",
        status: "pending",
        requestedAt: new Date("2024-01-20T08:30:00"),
        dueDate: new Date("2024-01-22T00:00:00"),
        amount: 850,
        description: "Emergency Plumbing Repair - Kitchen Sink",
        priority: "high",
        vendor: "Quick Plumb Inc",
        category: "Emergency Repairs",
        details: "Kitchen sink is leaking and causing water damage. Vendor has assessed and provided quote for immediate repair.",
        attachments: ["plumbing_quote.pdf", "damage_photos.zip"],
        comments: [
          {
            id: "1",
            author: "Property Manager",
            content: "Emergency repair needed. Sent urgent approval request to owner.",
            timestamp: new Date("2024-01-20T08:35:00")
          }
        ]
      },
      {
        id: "3",
        propertyId: "downtown",
        propertyName: "Downtown Lofts",
        ownerName: "Alex Rodriguez",
        ownerEmail: "owner@downtownlofts.com",
        type: "improvement",
        status: "approved",
        requestedAt: new Date("2024-01-19T15:00:00"),
        approvedAt: new Date("2024-01-20T10:00:00"),
        amount: 5000,
        description: "Kitchen Renovation - Countertop Replacement",
        priority: "medium",
        vendor: "Modern Interiors LLC",
        category: "Improvements",
        details: "Replace outdated kitchen countertops with quartz. Includes removal, installation, and minor cabinet modifications.",
        attachments: ["renovation_quote.pdf", "material_samples.pdf"],
        comments: [
          {
            id: "1",
            author: "Property Manager",
            content: "Submitted renovation proposal to owner",
            timestamp: new Date("2024-01-19T15:30:00")
          },
          {
            id: "2",
            author: "Alex Rodriguez",
            content: "Approved. Please proceed with the renovation.",
            timestamp: new Date("2024-01-20T10:00:00")
          }
        ]
      }
    ]
  }

  // Mock cards for technician
  const technicianCards = [
    { id: 't1', number: '**** 1122', holder: technicianName, balance: 1200, status: 'active' },
    { id: 't2', number: '**** 3344', holder: technicianName, balance: 800, status: 'active' },
  ];
  // Mock transactions for technician
  const technicianTransactions = [
    { id: 't1', date: '2024-01-15', vendor: 'Home Depot', amount: 120.5, status: 'pending', jobId: 'job1', billable: true, madeBy: 'Alice Johnson', cardHolder: 'Alice Johnson', memo: undefined, receipt: undefined },
    { id: 't2', date: '2024-01-14', vendor: 'Lowe\'s', amount: 89.99, status: 'reconciled', jobId: 'job1', billable: false, madeBy: 'Alice Johnson', cardHolder: 'Alice Johnson', memo: undefined, receipt: undefined },
    { id: 't3', date: '2024-01-13', vendor: 'Ace Hardware', amount: 45.00, status: 'pending', jobId: 'job1', billable: true, madeBy: 'Alice Johnson', cardHolder: 'Alice Johnson', memo: undefined, receipt: undefined },
  ];

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "synced":
        return (
          <Badge className="bg-green-500/20 text-green-400 border-green-500/30">
            <CheckCircle className="h-3 w-3 mr-1" />
            Synced
          </Badge>
        )
      case "pending":
        return (
          <Badge className="bg-yellow-500/20 text-yellow-400 border-yellow-500/30">
            <Clock className="h-3 w-3 mr-1" />
            Pending
          </Badge>
        )
      case "balanced":
        return (
          <Badge className="bg-green-500/20 text-green-400 border-green-500/30">
            <CheckCircle className="h-3 w-3 mr-1" />
            Balanced
          </Badge>
        )
      case "variance":
        return (
          <Badge className="bg-red-500/20 text-red-400 border-red-500/30">
            <AlertCircle className="h-3 w-3 mr-1" />
            Variance
          </Badge>
        )
      case "reconciled":
        return <Badge className="bg-blue-500/20 text-blue-400 border-blue-500/30">Reconciled</Badge>
      case "active":
        return <Badge className="bg-green-500/20 text-green-400 border-green-500/30">Active</Badge>
      default:
        return <Badge variant="secondary">{status}</Badge>
    }
  }

  const getActivityIcon = (type: string) => {
    switch (type) {
      case "expense":
        return <Receipt className="h-4 w-4 text-red-400" />
      case "payment":
        return <DollarSign className="h-4 w-4 text-green-400" />
      case "report":
        return <FileText className="h-4 w-4 text-blue-400" />
      case "sync":
        return <Sync className="h-4 w-4 text-purple-400" />
      case "alert":
        return <AlertCircle className="h-4 w-4 text-yellow-400" />
      default:
        return <CheckCircle className="h-4 w-4 text-gray-400" />
    }
  }

  const handlePayBills = (property: any) => {
    setSelectedProperty(property)
    setPaymentDialogOpen(true)
  }

  const handleGenerateReport = (property: any) => {
    setSelectedProperty(property)
    setReportDialogOpen(true)
  }

  const handleViewApproval = (approval: any) => {
    setSelectedApproval(approval)
    setApprovalDialogOpen(true)
  }

  // Handle reimbursement for work orders
  const handleReimburseWorkOrder = (job: any, amount: number) => {
    setSelectedReimbursementJob(job);
    setReimbursementAmount(amount);
    setReimbursementDialogOpen(true);
  };

  // Process reimbursement
  const processReimbursement = () => {
    if (!selectedReimbursementJob || reimbursementAmount <= 0) return;
    
    // Mock reimbursement processing
    console.log(`Processing reimbursement for ${selectedReimbursementJob.description}: $${reimbursementAmount}`);
    
    // Update transaction status to reconciled
    setTransactions(prev => prev.map(txn => 
      txn.jobId === selectedReimbursementJob.id 
        ? { ...txn, status: 'reconciled' as const }
        : txn
    ));
    
    // Close dialog and reset state
    setReimbursementDialogOpen(false);
    setSelectedReimbursementJob(null);
    setReimbursementAmount(0);
    setReimbursementNote('');
  };

  // Toggle work order expansion in payments tab
  const toggleWorkOrderExpansion = (jobId: string) => {
    setExpandedWorkOrders(prev => {
      const newSet = new Set(prev);
      if (newSet.has(jobId)) {
        newSet.delete(jobId);
      } else {
        newSet.add(jobId);
      }
      return newSet;
    });
  };

  // Handle monthly report generation
  const handleGenerateMonthlyReport = (property: any) => {
    setSelectedReportProperty(property);
    setMonthlyReportDialogOpen(true);
  };

  // Generate monthly report data
  const generateMonthlyReportData = (property: any, month: string) => {
    const [year, monthNum] = month.split('-');
    const startDate = new Date(parseInt(year), parseInt(monthNum) - 1, 1);
    const endDate = new Date(parseInt(year), parseInt(monthNum), 0);
    
    // Get all transactions for this property in the specified month
    const propertyJobs = jobs.filter(job => job.property === property.name);
    const propertyTransactions = [...transactions, ...technicianTransactions].filter(txn => {
      const job = jobs.find(j => j.id === txn.jobId);
      if (!job || job.property !== property.name) return false;
      
      const txnDate = new Date(txn.date);
      return txnDate >= startDate && txnDate <= endDate;
    });

    // Group by work order
    const workOrderGroups = propertyJobs.map(job => {
      const jobTransactions = propertyTransactions.filter(txn => txn.jobId === job.id);
      const totalAmount = jobTransactions.reduce((sum, txn) => sum + txn.amount, 0);
      const billableAmount = jobTransactions.filter(txn => txn.billable).reduce((sum, txn) => sum + txn.amount, 0);
      const nonBillableAmount = jobTransactions.filter(txn => !txn.billable).reduce((sum, txn) => sum + txn.amount, 0);
      
      return {
        job,
        transactions: jobTransactions,
        totalAmount,
        billableAmount,
        nonBillableAmount,
        transactionCount: jobTransactions.length
      };
    }).filter(group => group.transactions.length > 0);

    // Calculate totals
    const totalSpend = propertyTransactions.reduce((sum, txn) => sum + txn.amount, 0);
    const billableSpend = propertyTransactions.filter(txn => txn.billable).reduce((sum, txn) => sum + txn.amount, 0);
    const nonBillableSpend = propertyTransactions.filter(txn => !txn.billable).reduce((sum, txn) => sum + txn.amount, 0);
    const pendingAmount = propertyTransactions.filter(txn => txn.status === 'pending').reduce((sum, txn) => sum + txn.amount, 0);
    const reconciledAmount = propertyTransactions.filter(txn => txn.status === 'reconciled').reduce((sum, txn) => sum + txn.amount, 0);

    return {
      property,
      month,
      workOrderGroups,
      summary: {
        totalSpend,
        billableSpend,
        nonBillableSpend,
        pendingAmount,
        reconciledAmount,
        transactionCount: propertyTransactions.length,
        workOrderCount: workOrderGroups.length
      }
    };
  };

  // Export monthly report to CSV
  const exportMonthlyReportToCSV = (reportData: any) => {
    const { property, month, workOrderGroups, summary } = reportData;
    
    // Create CSV content
    let csvContent = `Monthly Spending Report - ${property.name}\n`;
    csvContent += `Month: ${month}\n\n`;
    
    // Summary section
    csvContent += `Summary\n`;
    csvContent += `Total Spend,${summary.totalSpend.toFixed(2)}\n`;
    csvContent += `Billable Spend,${summary.billableSpend.toFixed(2)}\n`;
    csvContent += `Non-Billable Spend,${summary.nonBillableSpend.toFixed(2)}\n`;
    csvContent += `Pending Amount,${summary.pendingAmount.toFixed(2)}\n`;
    csvContent += `Reconciled Amount,${summary.reconciledAmount.toFixed(2)}\n`;
    csvContent += `Total Transactions,${summary.transactionCount}\n`;
    csvContent += `Work Orders with Expenses,${summary.workOrderCount}\n\n`;
    
    // Work order details
    csvContent += `Work Order Details\n`;
    csvContent += `Work Order ID,Description,Technician,Total Amount,Billable Amount,Non-Billable Amount,Transaction Count\n`;
    
    workOrderGroups.forEach(group => {
      csvContent += `${group.job.id},"${group.job.description}","${group.job.technician || 'Unassigned'}",${group.totalAmount.toFixed(2)},${group.billableAmount.toFixed(2)},${group.nonBillableAmount.toFixed(2)},${group.transactionCount}\n`;
    });
    
    csvContent += `\nTransaction Details\n`;
    csvContent += `Date,Vendor,Made By,Amount,Status,Billable,Work Order,Memo\n`;
    
    workOrderGroups.forEach(group => {
      group.transactions.forEach(txn => {
        csvContent += `${txn.date},"${txn.vendor}","${txn.madeBy}",${txn.amount.toFixed(2)},${txn.status},${txn.billable ? 'Yes' : 'No'},"${group.job.description}","${txn.memo || ''}"\n`;
      });
    });
    
    // Download CSV file
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `monthly-report-${property.name}-${month}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  // Sidebar tabs for each role
  const sidebarTabs =
    role === 'pm'
      ? [
          { id: 'dashboard', label: 'Dashboard', icon: Folder },
          { id: 'workorders', label: 'Work Orders', icon: FileText },
          { id: 'activity', label: 'Activity Log', icon: Zap },
          { id: 'wallet', label: 'Expenses', icon: CreditCard },
          { id: 'transactions', label: 'Transactions', icon: FileText },
          { id: 'properties', label: 'Properties', icon: Home },
          { id: 'staff', label: 'Technicians', icon: User },
        ]
      : role === 'centralOffice'
      ? [
          { id: 'dashboard', label: 'Dashboard', icon: Folder },
          { id: 'workorders', label: 'Work Orders', icon: FileText },
          { id: 'activity', label: 'Activity Log', icon: Zap },
          { id: 'payments', label: 'Payments', icon: DollarSign },
          { id: 'policy', label: 'Policy', icon: BookOpen },
          { id: 'transactions', label: 'Transactions', icon: FileText },
          { id: 'properties', label: 'Properties', icon: Home },
          { id: 'staff', label: 'Technicians', icon: User },
        ]
      : [
          { id: 'dashboard', label: 'Dashboard', icon: Folder },
          { id: 'workorders', label: 'Work Orders', icon: FileText },
          { id: 'technicianExpenses', label: 'My Expenses', icon: CreditCard },
          { id: 'profile', label: 'Profile', icon: User },
        ];

  // Sample properties for dropdown
  const propertyOptions = [
    { id: 'prop1', name: 'Stanford GSB' },
    { id: 'prop2', name: 'Sunnyvale 432' },
  ]

  type JobType = typeof jobsList[0];

  // Helper for status badge style
  const getStatusBadgeClass = (statusValue: string) => {
    if (statusValue === 'approved') return 'bg-green-700 text-green-100';
    if (statusValue === 'pending') return 'bg-gray-700 text-gray-200';
    if (statusValue === 'rejected') return 'bg-red-700 text-red-100';
    return 'bg-gray-700 text-gray-300';
  }

  // Helper to get time since sent (mocked for now)
  function getTimeSince(dateString: string) {
    const now = new Date();
    const sent = new Date(dateString);
    const diff = Math.floor((now.getTime() - sent.getTime()) / 1000);
    if (diff < 60) return `${diff}s ago`;
    if (diff < 3600) return `${Math.floor(diff/60)}m ago`;
    if (diff < 86400) return `${Math.floor(diff/3600)}h ago`;
    return `${Math.floor(diff/86400)}d ago`;
  }

  function addNote() {
    if (!notesJob || !newNote.trim()) return;
    setJobNotes(prev => ({
      ...prev,
      [notesJob.id]: [
        ...(prev[notesJob.id] || []),
        {
          author: role === 'technician' ? technicianName : 'Property Manager',
          content: newNote.trim(),
          timestamp: new Date().toISOString(),
        },
      ],
    }));
    setNewNote("");
  }

  const router = useRouter();

  // Helper: get jobs by status
  const openJobs = jobs.filter(j => j.techStatus !== 'Finished');
  const pendingOwnerApprovals = jobs.filter(j => j.preApprovalStatus === 'Required' && j.statusValue === 'pending');
  const jobsAssignedToSubs = jobs.filter(j => j.technician && (j.techStatus === 'Started' || j.techStatus === 'Not Started'));
  const overdueJobs = jobs.filter(j => {
    // For demo, overdue if requested date is >7 days ago and not finished
    const daysAgo = (dateStr: string) => {
      const now = new Date();
      const d = new Date(dateStr);
      return (now.getTime() - d.getTime()) / (1000 * 60 * 60 * 24);
    };
    return j.techStatus !== 'Finished' && daysAgo(j.requested) > 7;
  });

  // Helper: get current month transactions
  const allTxns = [...transactions, ...technicianTransactions];
  const isThisMonth = (dateStr: string) => {
    const d = new Date(dateStr);
    const now = new Date();
    return d.getMonth() === now.getMonth() && d.getFullYear() === now.getFullYear();
  };
  const txnsThisMonth = allTxns.filter(txn => isThisMonth(txn.date));
  const totalSpend = txnsThisMonth.reduce((sum, txn) => sum + txn.amount, 0);
  const billableSpend = txnsThisMonth.filter(txn => txn.billable).reduce((sum, txn) => sum + txn.amount, 0);
  const nonBillableSpend = txnsThisMonth.filter(txn => !txn.billable).reduce((sum, txn) => sum + txn.amount, 0);
  const uncategorized = txnsThisMonth.filter(txn => !txn.jobId || txn.status === 'pending');
  const uncategorizedSpend = uncategorized.reduce((sum, txn) => sum + txn.amount, 0);

  function handleSmartAssistSend() {
    if (!smartAssistInput.trim()) return;
    setSmartAssistChat((prev) => [
      ...prev,
      { role: 'user', content: smartAssistInput.trim() },
      { role: 'assistant', content: `This is a mock answer to: "${smartAssistInput.trim()}". (LLM integration coming soon!)` }
    ]);
    setSmartAssistInput("");
  }

  // Helper to filter transactions
  const filteredTransactions = [...transactions, ...technicianTransactions].filter(txn => {
    const job = jobs.find(j => j.id === txn.jobId);
    const property = job ? properties.find(p => p.name === job.property) : undefined;
    let pass = true;
    if (txnFilterStatus !== 'all') pass = pass && txn.status === txnFilterStatus;
    if (txnFilterBillable !== 'all') pass = pass && ((txnFilterBillable === 'billable' && txn.billable) || (txnFilterBillable === 'nonbillable' && !txn.billable));
    if (txnFilterProperty !== 'all') pass = pass && !!property && property.id === txnFilterProperty;
    if (txnFilterJob !== 'all') pass = pass && txn.jobId === txnFilterJob;
    if (txnFilterDateFrom) pass = pass && new Date(txn.date) >= new Date(txnFilterDateFrom);
    if (txnFilterDateTo) pass = pass && new Date(txn.date) <= new Date(txnFilterDateTo);
    if (txnFilterMadeBy !== 'all') pass = pass && txn.madeBy === txnFilterMadeBy;
    return pass;
  });

  // Helper to get transactions that need review
  const getTransactionsNeedingReview = () => {
    return [...transactions, ...technicianTransactions].filter(txn => {
      // Check if transaction has a review flag
      if (transactionReviewFlags[txn.id]) return true;
      
      // Check for missing critical information
      if (!txn.receipt) return true;
      if (!txn.memo) return true;
      if (!txn.jobId) return true;
      
      // Check for unusual amounts (over $1000)
      if (txn.amount > 1000) return true;
      
      return false;
    });
  };

  // Helper to validate new transaction form
  const validateNewTransactionForm = () => {
    const errors: Record<string, string> = {};
    if (!newTransactionForm.date) errors.date = 'Date is required';
    if (!newTransactionForm.vendor) errors.vendor = 'Vendor is required';
    if (!newTransactionForm.amount) errors.amount = 'Amount is required';
    if (!newTransactionForm.madeBy) errors.madeBy = 'Made By is required';
    if (!newTransactionForm.cardHolder) errors.cardHolder = 'Card Holder is required';
    if (!newTransactionForm.property) errors.property = 'Property is required';
    if (!newTransactionForm.memo) errors.memo = 'Memo is required';
    return errors;
  };

  // Helper to create new transaction
  const handleCreateNewTransaction = () => {
    const errors = validateNewTransactionForm();
    if (Object.keys(errors).length > 0) {
      // Handle validation errors (could show toast or set error state)
      console.log('Validation errors:', errors);
      return;
    }

    const newTxn: Transaction = {
      id: `txn-${Date.now()}`,
      date: newTransactionForm.date,
      vendor: newTransactionForm.vendor,
      amount: parseFloat(newTransactionForm.amount),
      status: 'pending',
      billable: newTransactionForm.billable,
      jobId: newTransactionForm.job === 'none' ? '' : newTransactionForm.job,
      madeBy: newTransactionForm.madeBy,
      cardHolder: newTransactionForm.cardHolder,
      memo: newTransactionForm.memo,
      receipt: newTransactionForm.receipt
    };

    setTransactions(prev => [...prev, newTxn]);
    setNewTransactionDialogOpen(false);
    setNewTransactionForm({
      date: '',
      vendor: '',
      amount: '',
      madeBy: '',
      cardHolder: '',
      property: '',
      job: '',
      billable: true,
      memo: '',
      receipt: ''
    });
  };

  // Helper to open edit transaction dialog
  const handleEditTransaction = (transaction: Transaction) => {
    const job = jobs.find(j => j.id === transaction.jobId);
    const property = job ? properties.find(p => p.name === job.property) : undefined;
    
    setEditingTransaction(transaction);
    setEditTransactionForm({
      date: transaction.date,
      vendor: transaction.vendor,
      amount: transaction.amount.toString(),
      madeBy: transaction.madeBy,
      cardHolder: transaction.cardHolder || '',
      property: property ? property.name : '',
      job: transaction.jobId || 'none',
      billable: transaction.billable,
      memo: transaction.memo || '',
      receipt: transaction.receipt || ''
    });
    setEditTransactionDialogOpen(true);
  };

  // Helper to update transaction
  const handleUpdateTransaction = () => {
    if (!editingTransaction) return;

    const updatedTxn: Transaction = {
      ...editingTransaction,
      date: editTransactionForm.date,
      vendor: editTransactionForm.vendor,
      amount: parseFloat(editTransactionForm.amount),
      billable: editTransactionForm.billable,
      jobId: editTransactionForm.job === 'none' ? '' : editTransactionForm.job,
      madeBy: editTransactionForm.madeBy,
      cardHolder: editTransactionForm.cardHolder,
      memo: editTransactionForm.memo,
      receipt: editTransactionForm.receipt
    };

    setTransactions(prev => prev.map(txn => txn.id === editingTransaction.id ? updatedTxn : txn));
    setEditTransactionDialogOpen(false);
    setEditingTransaction(null);
    setEditTransactionForm({
      date: '',
      vendor: '',
      amount: '',
      madeBy: '',
      cardHolder: '',
      property: '',
      job: '',
      billable: true,
      memo: '',
      receipt: ''
    });
  };

  // Helper to filter expenses by role (for technicians, only show their own expenses)
  const filterExpensesByRole = (expenses: (Transaction | typeof technicianTransactions[0])[]) => {
    return expenses.filter(txn => {
      if (role === 'technician') {
        // For technicians, only show expenses from their own cards
        return txn.cardHolder === technicianName;
      } else if (role === 'pm') {
        // For PM, show all expenses (they can see everything)
        return true;
      } else if (role === 'centralOffice') {
        // For Central Office, show all expenses (they can see everything)
        return true;
      }
      return true;
    });
  };

  // Export to CSV (browser-based, no dependency)
  function exportTransactionsToCSV() {
    const headers = [
      'Date', 'Merchant', 'Amount', 'Made By', 'Property', 'Job', 'Billable', 'Memo', 'Receipt'
    ];
    const rows = filteredTransactions.map(txn => {
      const job = jobs.find(j => j.id === txn.jobId);
      const property = job ? properties.find(p => p.name === job.property) : undefined;
      return [
        txn.date,
        txn.vendor,
        txn.amount,
        txn.madeBy,
        property ? property.name : '',
        job ? job.description : '',
        txn.billable ? 'Billable' : 'Non-Billable',
        txn.memo || '',
        txn.receipt || ''
      ];
    });
    const csv = [headers, ...rows].map(row => row.map(val => `"${String(val).replace(/"/g, '""')}"`).join(',')).join('\n');
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'transactions.csv';
    document.body.appendChild(a);
    a.click();
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 0);
  }

  const validateWorkOrderForm = () => {
    const errors: Record<string, string> = {};
    if (!newWorkOrder.property) errors.property = 'Property is required';
    if (!newWorkOrder.description) errors.description = 'Description is required';
    if (!newWorkOrder.priority) errors.priority = 'Priority is required';
    if (!newWorkOrder.cost) errors.cost = 'Estimated cost is required';
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleCreateWorkOrder = () => {
    if (!validateWorkOrderForm()) return;
    
    // Auto-set approval status based on cost
    const finalApprovalStatus = Number(newWorkOrder.cost) >= 1000 ? 'Required' : 'Not Required';
    
    const newJob = {
      id: `job-${Date.now()}`,
      property: newWorkOrder.property,
      description: newWorkOrder.description,
      preApprovalStatus: finalApprovalStatus,
      technician: 'Unassigned',
      techStatus: 'Not Started',
      requested: new Date().toLocaleDateString(),
      owner: 'PM',
      priority: newWorkOrder.priority,
      status: 'Open',
      statusValue: 'open',
      notes: newWorkOrder.notes || '',
      cost: Number(newWorkOrder.cost) || 0
    };

    setJobs(prev => [...prev, newJob]);
    
    // If approval is required, show the approval workflow
    if (finalApprovalStatus === 'Required') {
      setPendingJob(newJob);
      setShowPreApprovalDialog(true);
    }
    
    setNewJobDialogOpen(false);
    setNewWorkOrder({
      property: '',
      description: '',
      
      notes: '',
      cost: '',
      priority: 'Medium'
    });
    setFormErrors({});
  };

  const handleUpdateWorkOrder = () => {
    if (!editJob || !editJobForm.property || !editJobForm.description) return;
    
    const updatedJob = {
      ...editJob,
      property: editJobForm.property,
      description: editJobForm.description,
      cost: Number(editJobForm.cost) || 0,
      priority: editJobForm.priority
    };

    setJobs(prev => prev.map(job => job.id === editJob.id ? updatedJob : job));
    
    setEditJobDialogOpen(false);
    setEditJob(null);
    setEditJobForm({
      property: '',
      description: '',
      cost: '',
      priority: 'Medium'
    });
  };

  // State for Smart Assist drawer
  const [smartAssistOpen, setSmartAssistOpen] = useState(false);

  // State for approval file uploads per job
  const [approvalFiles, setApprovalFiles] = useState<{ [jobId: string]: File | null }>({});

  // Add state for viewing technician work orders
  const [viewTechnicianWorkOrders, setViewTechnicianWorkOrders] = useState<string | null>(null);
  
  // Add state for transaction details dialog
  const [transactionDetailsOpen, setTransactionDetailsOpen] = useState(false);

  // Get current user name based on role
  const getCurrentUserName = () => {
    if (role === 'technician') {
      return technicianName;
    } else if (role === 'pm') {
      return 'Property Manager'; // PM can see all expenses
    } else if (role === 'centralOffice') {
      return 'Central Office'; // Central Office can see all expenses
    }
    return '';
  };

  // Helper to filter work orders by role (for technicians, only show their assigned work orders)
  const filterWorkOrdersByRole = (workOrders: typeof jobs) => {
    if (role === 'technician') {
      // For technicians, only show work orders assigned to them
      return workOrders.filter(job => job.technician === technicianName);
    } else if (role === 'pm') {
      // For PM, show all work orders (they can see everything)
      return workOrders;
    } else {
      // For Central Office, show all work orders
      return workOrders;
    }
  };

  // Get technician-specific data for Dashboard
  const technicianWorkOrders = filterWorkOrdersByRole(jobs);
  const technicianExpenses = filterExpensesByRole([...transactions, ...technicianTransactions]);
  
  // Calculate technician-specific KPIs
  const technicianOpenJobs = technicianWorkOrders.filter(job => job.statusValue === 'open');
  const technicianInProgressJobs = technicianWorkOrders.filter(job => job.techStatus === 'In Progress');
  const technicianFinishedJobs = technicianWorkOrders.filter(job => job.techStatus === 'Finished');
  const technicianOverdueJobs = technicianWorkOrders.filter(job => {
    const dueDate = new Date(job.requested);
    const today = new Date();
    return dueDate < today && job.statusValue !== 'closed';
  });

  // Calculate technician-specific expense KPIs
  const technicianTxnsThisMonth = technicianExpenses.filter(txn => isThisMonth(txn.date));
  const technicianTotalSpend = technicianTxnsThisMonth.reduce((sum, txn) => sum + txn.amount, 0);
  const technicianBillableSpend = technicianTxnsThisMonth.filter(txn => txn.billable).reduce((sum, txn) => sum + txn.amount, 0);
  const technicianNonBillableSpend = technicianTxnsThisMonth.filter(txn => !txn.billable).reduce((sum, txn) => sum + txn.amount, 0);
  const technicianUncategorized = technicianTxnsThisMonth.filter(txn => !txn.jobId || txn.status === 'pending');
  const technicianUncategorizedSpend = technicianUncategorized.reduce((sum, txn) => sum + txn.amount, 0);

  // Helper to calculate YTD spending for a property
  const getPropertyYTDSpending = (propertyName: string) => {
    const currentYear = new Date().getFullYear();
    const propertyJobs = jobs.filter(job => job.property === propertyName);
    const propertyTransactions = [...transactions, ...technicianTransactions].filter(txn => {
      const job = jobs.find(j => j.id === txn.jobId);
      if (!job || job.property !== propertyName) return false;
      
      const txnDate = new Date(txn.date);
      return txnDate.getFullYear() === currentYear;
    });
    
    return propertyTransactions.reduce((sum, txn) => sum + txn.amount, 0);
  };

  return (
    <div className="min-h-screen bg-black text-white flex flex-col">
      {/* Role Toggle for Demo */}
      <div className="flex justify-end p-4 bg-gray-900 border-b border-gray-800">
        <span className="mr-2 text-gray-400">Role:</span>
        <Button
          size="sm"
          className={role === 'pm' ? 'bg-blue-600 text-white mr-2' : 'border-blue-600 text-blue-400 mr-2'}
          variant={role === 'pm' ? 'default' : 'outline'}
          onClick={() => { setRole('pm'); setActiveTab('dashboard'); }}
        >
          Property Manager
        </Button>
        <Button
          size="sm"
          className={role === 'technician' ? 'bg-blue-600 text-white mr-2' : 'border-blue-600 text-blue-400 mr-2'}
          variant={role === 'technician' ? 'default' : 'outline'}
          onClick={() => { setRole('technician'); setActiveTab('dashboard'); }}
        >
          Technician
        </Button>
        <Button
          size="sm"
          className={role === 'centralOffice' ? 'bg-blue-600 text-white' : 'border-blue-600 text-blue-400'}
          variant={role === 'centralOffice' ? 'default' : 'outline'}
          onClick={() => { setRole('centralOffice'); setActiveTab('dashboard'); }}
        >
          Central Office
        </Button>
            </div>
      <div className="flex flex-1">
        {/* Left Sidebar */}
        <div className="w-64 bg-gray-900 border-r border-gray-800 p-4">
          <div className="mb-8">
            <h1 className="text-2xl font-bold text-white mb-2">Job Vault</h1>
          </div>
          <nav className="space-y-1">
            {sidebarTabs.map((item) => (
              <button
                key={item.id}
                onClick={() => setActiveTab(item.id)}
                className={cn(
                  "w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors",
                  activeTab === item.id ? "bg-gray-800 text-white" : "hover:bg-gray-800 text-gray-300 hover:text-white",
                  "focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900"
                )}
              >
                <item.icon className="h-5 w-5" />
                <span>{item.label}</span>
              </button>
            ))}
          </nav>
          <div className="mt-8 pt-8 border-t border-gray-800">
            <div className="space-y-2">
              <Button variant="outline" className="w-full justify-start bg-gray-800 border-gray-700 text-gray-300 hover:bg-gray-700 hover:text-white">
                <Database className="h-4 w-4 mr-2" />
                Sync All
              </Button>
              <Button variant="outline" className="w-full justify-start bg-gray-800 border-gray-700 text-gray-300 hover:bg-gray-700 hover:text-white">
                <Settings className="h-4 w-4 mr-2" />
                Settings
              </Button>
            </div>
          </div>
        </div>
        {/* Main Content */}
        <div className="flex-1 overflow-auto">
          {/* Header */}
          <header className="border-b border-gray-800 bg-black/50 backdrop-blur-sm sticky top-0 z-10">
            <div className="px-6 py-4">
            <div className="flex items-center justify-between">
                {/* Remove QuickBooks Ready badge and Export All button */}
          </div>
        </div>
      </header>
          <div className="p-6">
            {/* Main content area controlled by activeTab */}
            {activeTab === "dashboard" && (
              <>
                {/* Dashboard Summary Section */}
                <div className="mb-6 p-6 bg-gradient-to-r from-blue-900 via-blue-800 to-blue-600 rounded-xl shadow-lg flex flex-col md:flex-row md:items-center md:justify-between gap-6">
                  <div>
                    <h2 className="text-2xl font-bold text-white mb-2">Welcome back!</h2>
                    <p className="text-blue-200 text-lg">
                      {role === 'technician' ? (
                        <>
                          You have <span className="font-semibold text-blue-300">{technicianOpenJobs.length}</span> open work orders, <span className="font-semibold text-blue-200">{technicianInProgressJobs.length}</span> in progress, <span className="font-semibold text-blue-100">{technicianFinishedJobs.length}</span> finished, and <span className="font-semibold text-blue-100">${technicianTotalSpend.toLocaleString(undefined, {minimumFractionDigits:2})}</span> spent this month.
                        </>
                      ) : (
                        <>
                          You have <span className="font-semibold text-blue-300">{openJobs.length}</span> open work orders, <span className="font-semibold text-blue-200">{pendingOwnerApprovals.length}</span> pending owner approvals, and <span className="font-semibold text-blue-100">${totalSpend.toLocaleString(undefined, {minimumFractionDigits:2})}</span> spent this month.
                        </>
                      )}
                    </p>
                    <p className="text-blue-300 mt-2 text-sm">
                      {role === 'technician' 
                        ? "Keep track of your assigned work orders and expenses for efficient project management."
                        : "Keep an eye on overdue work orders and uncategorized expenses for a healthy workflow."
                      }
                    </p>
                  </div>
                  {/* Removed badges for Open Jobs, Pending Approvals, This Month */}
                </div>
                {/* Job Status Overview KPIs */}
                <div className="mb-2 mt-2">
                  <h4 className="text-lg font-semibold text-white mb-2">
                    {role === 'technician' ? 'My Work Order Status Overview' : 'Work Order Status Overview'}
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
                    <Card className="bg-gray-800 border-gray-700">
                      <CardContent className="p-4">
                        <div className="text-gray-400 text-xs mb-1">
                          {role === 'technician' ? 'Open Work Orders' : 'Open Work Orders'}
                        </div>
                        <div className="text-3xl font-bold text-white">
                          {role === 'technician' ? technicianOpenJobs.length : openJobs.length}
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-gray-800 border-gray-700">
                      <CardContent className="p-4">
                        <div className="text-gray-400 text-xs mb-1">
                          {role === 'technician' ? 'In Progress' : 'Pending Owner Approvals'}
                        </div>
                        <div className="text-3xl font-bold text-yellow-400">
                          {role === 'technician' ? technicianInProgressJobs.length : pendingOwnerApprovals.length}
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-gray-800 border-gray-700">
                      <CardContent className="p-4">
                        <div className="text-gray-400 text-xs mb-1">
                          {role === 'technician' ? 'Finished' : 'Work Orders Assigned to Subs'}
                        </div>
                        <div className="text-3xl font-bold text-blue-400">
                          {role === 'technician' ? technicianFinishedJobs.length : jobsAssignedToSubs.length}
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-gray-800 border-gray-700">
                      <CardContent className="p-4">
                        <div className="text-gray-400 text-xs mb-1">
                          {role === 'technician' ? 'Overdue' : 'Overdue Work Orders'}
                        </div>
                        <div className="text-3xl font-bold text-red-400">
                          {role === 'technician' ? technicianOverdueJobs.length : overdueJobs.length}
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </div>
                {/* Expenses This Month KPIs */}
                <div className="mb-2 mt-8">
                  <h4 className="text-lg font-semibold text-white mb-2">
                    {role === 'technician' ? 'My Expenses This Month' : 'Expenses This Month'}
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
                    <Card className="bg-gray-800 border-gray-700">
                      <CardContent className="p-4">
                        <div className="text-gray-400 text-xs mb-1">Total Spend</div>
                        <div className="text-3xl font-bold text-white">
                          ${role === 'technician' ? technicianTotalSpend.toLocaleString(undefined, {minimumFractionDigits:2}) : totalSpend.toLocaleString(undefined, {minimumFractionDigits:2})}
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-gray-800 border-gray-700">
                      <CardContent className="p-4">
                        <div className="text-gray-400 text-xs mb-1">Billable</div>
                        <div className="text-3xl font-bold text-green-400">
                          ${role === 'technician' ? technicianBillableSpend.toLocaleString(undefined, {minimumFractionDigits:2}) : billableSpend.toLocaleString(undefined, {minimumFractionDigits:2})}
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-gray-800 border-gray-700">
                      <CardContent className="p-4">
                        <div className="text-gray-400 text-xs mb-1">Non-Billable</div>
                        <div className="text-3xl font-bold text-gray-400">
                          ${role === 'technician' ? technicianNonBillableSpend.toLocaleString(undefined, {minimumFractionDigits:2}) : nonBillableSpend.toLocaleString(undefined, {minimumFractionDigits:2})}
                        </div>
                      </CardContent>
                    </Card>
                    <Card className="bg-gray-800 border-gray-700">
                      <CardContent className="p-4">
                        <div className="text-gray-400 text-xs mb-1">Uncategorized / Needs Review</div>
                        <div className="text-3xl font-bold text-yellow-400">
                          ${role === 'technician' ? technicianUncategorizedSpend.toLocaleString(undefined, {minimumFractionDigits:2}) : uncategorizedSpend.toLocaleString(undefined, {minimumFractionDigits:2})}
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </div>
                {/* Reimbursement Overview - Central Office Only */}
                {role === 'centralOffice' && (
                  <div className="mb-2 mt-8">
                    <h4 className="text-lg font-semibold text-white mb-2">Reimbursement Overview</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
                      <Card className="bg-gray-800 border-gray-700">
                        <CardContent className="p-4">
                          <div className="text-gray-400 text-xs mb-1">Total Expense Spend</div>
                          <div className="text-3xl font-bold text-white">
                            ${totalSpend.toLocaleString(undefined, {minimumFractionDigits:2})}
                          </div>
                        </CardContent>
                      </Card>
                      <Card className="bg-gray-800 border-gray-700">
                        <CardContent className="p-4">
                          <div className="text-gray-400 text-xs mb-1">Reimbursed</div>
                          <div className="text-3xl font-bold text-green-400">
                            ${allTxns.filter(txn => txn.status === 'reconciled' && isThisMonth(txn.date)).reduce((sum, txn) => sum + txn.amount, 0).toLocaleString(undefined, {minimumFractionDigits:2})}
                          </div>
                        </CardContent>
                      </Card>
                      <Card className="bg-gray-800 border-gray-700">
                        <CardContent className="p-4">
                          <div className="text-gray-400 text-xs mb-1">Awaiting Reimbursement</div>
                          <div className="text-3xl font-bold text-yellow-400">
                            ${allTxns.filter(txn => txn.status === 'pending' && txn.billable && isThisMonth(txn.date)).reduce((sum, txn) => sum + txn.amount, 0).toLocaleString(undefined, {minimumFractionDigits:2})}
                          </div>
                        </CardContent>
                      </Card>
                      <Card className="bg-gray-800 border-gray-700">
                        <CardContent className="p-4">
                          <div className="text-gray-400 text-xs mb-1">Issues / Needs Review</div>
                          <div className="text-3xl font-bold text-red-400">
                            ${allTxns.filter(txn => (!txn.jobId || txn.jobId === '') && isThisMonth(txn.date)).reduce((sum, txn) => sum + txn.amount, 0).toLocaleString(undefined, {minimumFractionDigits:2})}
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  </div>
                )}
                {/* Recent Activity Notifications */}
                <div className="mb-2 mt-8">
                  <h4 className="text-lg font-semibold text-white mb-2">
                    {role === 'technician' ? 'My Recent Activity' : 'Recent Activity'}
                  </h4>
                  <Card className="bg-gray-800 border-gray-700">
                    <CardContent className="p-4">
                      <div className="space-y-3">
                        {/* Mock recent activity notifications */}
                        {role === 'technician' ? (
                          <>
                            {/* Technician-specific activities */}
                            <div className="flex items-start space-x-3 p-3 bg-gray-900 rounded-lg border-l-4 border-blue-500">
                              <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                                  <FileText className="h-4 w-4 text-white" />
                                </div>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-sm text-white font-medium">Work order assigned to you</p>
                                <p className="text-xs text-gray-400">HVAC System Maintenance - Annual Service at Stanford GSB</p>
                                <p className="text-xs text-gray-500 mt-1">2 hours ago</p>
                              </div>
                            </div>
                            <div className="flex items-start space-x-3 p-3 bg-gray-900 rounded-lg border-l-4 border-green-500">
                              <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center">
                                  <CheckCircle className="h-4 w-4 text-white" />
                                </div>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-sm text-white font-medium">Work order completed</p>
                                <p className="text-xs text-gray-400">Lobby Painting at Downtown Lofts finished by you</p>
                                <p className="text-xs text-gray-500 mt-1">1 day ago</p>
                              </div>
                            </div>
                            <div className="flex items-start space-x-3 p-3 bg-gray-900 rounded-lg border-l-4 border-purple-500">
                              <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
                                  <DollarSign className="h-4 w-4 text-white" />
                                </div>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-sm text-white font-medium">Expense recorded</p>
                                <p className="text-xs text-gray-400">$120.50 spent at Home Depot for HVAC parts</p>
                                <p className="text-xs text-gray-500 mt-1">1 day ago</p>
                              </div>
                            </div>
                            <div className="flex items-start space-x-3 p-3 bg-gray-900 rounded-lg border-l-4 border-yellow-500">
                              <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-yellow-600 rounded-full flex items-center justify-center">
                                  <Clock className="h-4 w-4 text-white" />
                                </div>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-sm text-white font-medium">Work order in progress</p>
                                <p className="text-xs text-gray-400">Kitchen Renovation at Stanford GSB - Started work</p>
                                <p className="text-xs text-gray-500 mt-1">2 days ago</p>
                              </div>
                            </div>
                          </>
                        ) : (
                          <>
                            {/* PM/Central Office activities */}
                            <div className="flex items-start space-x-3 p-3 bg-gray-900 rounded-lg border-l-4 border-blue-500">
                              <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                                  <FileText className="h-4 w-4 text-white" />
                                </div>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-sm text-white font-medium">New work order created</p>
                                <p className="text-xs text-gray-400">HVAC System Maintenance - Annual Service at Stanford GSB</p>
                                <p className="text-xs text-gray-500 mt-1">2 hours ago</p>
                              </div>
                            </div>
                            <div className="flex items-start space-x-3 p-3 bg-gray-900 rounded-lg border-l-4 border-yellow-500">
                              <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-yellow-600 rounded-full flex items-center justify-center">
                                  <AlertCircle className="h-4 w-4 text-white" />
                                </div>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-sm text-white font-medium">Approval required</p>
                                <p className="text-xs text-gray-400">Emergency Plumbing Repair at Sunnyvale 432 needs owner approval</p>
                                <p className="text-xs text-gray-500 mt-1">4 hours ago</p>
                              </div>
                            </div>
                            <div className="flex items-start space-x-3 p-3 bg-gray-900 rounded-lg border-l-4 border-green-500">
                              <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center">
                                  <CheckCircle className="h-4 w-4 text-white" />
                                </div>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-sm text-white font-medium">Work order completed</p>
                                <p className="text-xs text-gray-400">Lobby Painting at Downtown Lofts finished by Alice Johnson</p>
                                <p className="text-xs text-gray-500 mt-1">1 day ago</p>
                              </div>
                            </div>
                            <div className="flex items-start space-x-3 p-3 bg-gray-900 rounded-lg border-l-4 border-purple-500">
                              <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
                                  <DollarSign className="h-4 w-4 text-white" />
                                </div>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-sm text-white font-medium">Expense recorded</p>
                                <p className="text-xs text-gray-400">$150.00 spent at Home Depot for HVAC parts</p>
                                <p className="text-xs text-gray-500 mt-1">1 day ago</p>
                              </div>
                            </div>
                            <div className="flex items-start space-x-3 p-3 bg-gray-900 rounded-lg border-l-4 border-red-500">
                              <div className="flex-shrink-0">
                                <div className="w-8 h-8 bg-red-600 rounded-full flex items-center justify-center">
                                  <Clock className="h-4 w-4 text-white" />
                                </div>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="text-sm text-white font-medium">Overdue work order</p>
                                <p className="text-xs text-gray-400">Kitchen Renovation at Stanford GSB is 3 days overdue</p>
                                <p className="text-xs text-gray-500 mt-1">2 days ago</p>
                              </div>
                            </div>
                          </>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </>
            )}
            {activeTab === "workorders" && (
              <>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-white">Work Orders</h3>
                  {(role === 'pm' || role === 'centralOffice') && (
                    <div className="flex gap-2">
                      <Button className="bg-blue-600 hover:bg-blue-700 text-white" onClick={() => setImportAppFolioDialogOpen(true)}>
                        <Sync className="h-4 w-4 mr-2" /> Appfolio Sync
                      </Button>
                      <Button className="bg-blue-600 hover:bg-blue-700 text-white" onClick={() => setNewJobDialogOpen(true)}>New Work Order</Button>
                    </div>
                  )}
                </div>
                <div className="flex flex-col h-[400px] rounded-lg mb-8">
                  <div className="flex-1 overflow-x-auto overflow-y-auto">
                    {/* Jobs table moved here from Dashboard */}
                    <TooltipProvider>
                      <table className="min-w-full text-sm">
                        <thead>
                          <tr className="bg-gray-900 border-b border-gray-700">
                            <th className="text-left py-3 px-4 min-w-[160px] font-semibold text-white">Property</th>
                            <th className="text-left py-3 px-4 min-w-[240px] font-semibold text-white">Name</th>
                            <th className="text-left py-3 px-4 min-w-[180px] font-semibold text-white">Approval</th>
                            <th className="text-left py-3 px-4 min-w-[140px] font-semibold text-white">Technician</th>
                            <th className="text-left py-3 px-4 min-w-[120px] font-semibold text-white">Requested</th>
                            <th className="text-center py-3 px-4 min-w-[100px] font-semibold text-white">Priority</th>
                            <th className="text-left py-3 px-4 min-w-[120px] font-semibold text-white">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {(role === 'technician'
                            ? jobs.filter((job) => job.technician === technicianName)
                            : jobs
                          ).map((job) => (
                            <React.Fragment key={job.id}>
                              <tr
                                className="group bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors cursor-pointer"
                                onClick={() => { router.push(`/workorders/${job.id}?role=${role}`); }}
                              >
                                <td className="py-3 px-4">
                                  <div className="font-medium text-white" title={job.property}>
                                    {job.property}
                                  </div>
                                </td>
                                <td className="py-3 px-4">
                                  <div className="text-gray-200" title={job.description}>
                                    {job.description.charAt(0).toUpperCase() + job.description.slice(1)}
                                  </div>
                                </td>
                                <td className="py-3 px-4">
                                  <div className="flex items-center gap-2">
                                    {/* Approval Status Pill System */}
                                    {job.preApprovalStatus === 'Approved' ? (
                                      <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-green-700 text-green-100">
                                        <CheckCircle className="h-4 w-4 mr-1 text-green-200" /> Approved
                                      </span>
                                    ) : job.preApprovalStatus === 'Required' && approvalJobs[job.id]?.status === 'No Response' ? (
                                      <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-yellow-600 text-yellow-100">
                                        <Clock className="h-4 w-4 mr-1 text-yellow-200" /> Approval Requested
                                      </span>
                                    ) : job.preApprovalStatus === 'Required' ? (
                                      <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-red-700 text-red-100">
                                        <AlertCircle className="h-4 w-4 mr-1 text-red-200" /> Approval Needed
                                      </span>
                                    ) : (
                                      <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gray-700 text-gray-200">
                                        <Settings className="h-4 w-4 mr-1 text-gray-300" /> Automatic Approval
                                      </span>
                                    )}
                                  </div>
                                </td>
                                <td className="py-3 px-4">
                                  <div className="text-gray-300" title={job.technician || 'Unassigned'}>
                                    {job.technician || 'Unassigned'}
                                  </div>
                                </td>
                                <td className="py-3 px-4 text-gray-300">
                                  {job.requested}
                                </td>
                                <td className="py-3 px-4 text-center">
                                  <TooltipProvider>
                                    <Tooltip>
                                      <TooltipTrigger asChild>
                                        <span className="flex justify-center items-center">
                                          {(() => {
                                            switch (job.priority) {
                                              case 'High':
                                                return <span className="inline-block w-4 h-4 rounded-full bg-red-500" />;
                                              case 'Medium':
                                                return <span className="inline-block w-4 h-4 rounded-full bg-orange-400" />;
                                              case 'Low':
                                                return <span className="inline-block w-4 h-4 rounded-full bg-blue-400" />;
                                              default:
                                                return <span className="inline-block w-4 h-4 rounded-full bg-gray-400" />;
                                            }
                                          })()}
                                        </span>
                                      </TooltipTrigger>
                                      <TooltipContent>{job.priority || '-'}</TooltipContent>
                                    </Tooltip>
                                  </TooltipProvider>
                                </td>
                                <td className="py-3 px-4">
                                  <div className="flex items-center gap-2">
                                    {(role === 'pm' || role === 'centralOffice') && (
                                      <>
                                        <Tooltip>
                                          <TooltipTrigger asChild>
                                            <Button
                                              size="icon"
                                              variant="ghost"
                                              className="h-8 w-8 text-gray-300 hover:text-white hover:bg-blue-500/20"
                                              onClick={e => { e.stopPropagation(); setEditJob({ ...job }); setEditJobDialogOpen(true); }}
                                            >
                                              <Settings className="h-4 w-4" />
                                            </Button>
                                          </TooltipTrigger>
                                          <TooltipContent>Edit job</TooltipContent>
                                        </Tooltip>
                                        <Tooltip>
                                          <TooltipTrigger asChild>
                                            <Button
                                              size="icon"
                                              variant="ghost"
                                              className="h-8 w-8 text-gray-300 hover:text-red-300 hover:bg-red-500/20"
                                              onClick={e => { e.stopPropagation(); setJobToDelete(job); setDeleteDialogOpen(true); }}
                                            >
                                              <Trash2 className="h-4 w-4" />
                                            </Button>
                                          </TooltipTrigger>
                                          <TooltipContent>Delete job</TooltipContent>
                                        </Tooltip>
                                      </>
                                    )}
                                    <Tooltip>
                                      <TooltipTrigger asChild>
                                        <Button
                                          size="icon"
                                          variant="ghost"
                                          className="h-8 w-8 text-gray-300 hover:text-white hover:bg-green-500/20"
                                          onClick={e => { 
                                            e.stopPropagation(); 
                                            setExpandedJobExpenses(expandedJobExpenses === job.id ? null : job.id); 
                                          }}
                                        >
                                          <Eye className="h-4 w-4" />
                                        </Button>
                                      </TooltipTrigger>
                                      <TooltipContent>
                                        {expandedJobExpenses === job.id ? 'Hide Expenses' : 'View Expenses'}
                                      </TooltipContent>
                                    </Tooltip>
                                    <Button
                                      size="icon"
                                      variant="ghost"
                                      className={`text-blue-400 hover:text-blue-600`}
                                      onClick={() => { router.push(`/workorders/${job.id}?role=${role}`); }}
                                      aria-label="View Work Order Details"
                                    >
                                      <ChevronRight className="h-5 w-5 transition-transform" />
                                    </Button>
                                  </div>
                                  {/* Separate Send Reminder button for jobs waiting for approval */}
                                  {(role === 'pm' || role === 'centralOffice') && approvalJobs[job.id]?.status === 'No Response' && (
                                    <div className="mt-2">
                                      <Tooltip>
                                        <TooltipTrigger asChild>
                                          <Button
                                            size="sm"
                                            variant="outline"
                                            className="text-blue-400 border-blue-700 hover:bg-blue-700/20"
                                          >
                                            <MessageSquare className="h-4 w-4 mr-1" />
                                            Send Reminder
                                          </Button>
                                        </TooltipTrigger>
                                        <TooltipContent>Send reminder to owner</TooltipContent>
                                      </Tooltip>
                                    </div>
                                  )}
                                </td>
                              </tr>
                              {/* Expanded expenses row */}
                              {expandedJobExpenses === job.id && (
                                <tr className="bg-gray-900">
                                  <td colSpan={8} className="p-0">
                                    <div className="p-4">
                                      <h5 className="text-sm font-semibold text-white mb-2">Expenses for this job</h5>
                                      <div className="overflow-x-auto">
                                        <table className="min-w-full text-xs mb-2">
                                          <thead>
                                            <tr className="border-b border-gray-700">
                                              <th className="text-left py-2 px-3 font-semibold text-white">Date</th>
                                              <th className="text-left py-2 px-3 font-semibold text-white">Vendor</th>
                                              <th className="text-left py-2 px-3 font-semibold text-white">Made By</th>
                                              <th className="text-left py-2 px-3 font-semibold text-white">Amount</th>
                                              <th className="text-left py-2 px-3 font-semibold text-white">Memo</th>
                                            </tr>
                                          </thead>
                                          <tbody>
                                            {filterExpensesByRole([...transactions, ...technicianTransactions])
                                              .filter(txn => txn.jobId === job.id)
                                              .map((txn) => {
                                                return (
                                                  <tr key={txn.id} className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700">
                                                    <td className="py-2 px-3 text-left text-gray-300">{txn.date}</td>
                                                    <td className="py-2 px-3 text-left text-gray-300">{txn.vendor}</td>
                                                    <td className="py-2 px-3 text-left text-gray-300">{txn.madeBy}</td>
                                                    <td className="py-2 px-3 text-left text-gray-300">${txn.amount.toFixed(2)}</td>
                                                    <td className="py-2 px-3 text-left text-gray-300">{txn.memo || '-'}</td>
                                                  </tr>
                                                );
                                              })}
                                          </tbody>
                                        </table>
                                      </div>
                                    </div>
                                  </td>
                                </tr>
                              )}
                            </React.Fragment>
                          ))}
                        </tbody>
                      </table>
                    </TooltipProvider>
                  </div>
                </div>
              </>
            )}
            {activeTab === "activity" && (
              <>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-white">Activity Log</h3>
                        </div>

                {/* Filters */}
                <div className="flex flex-wrap gap-4 mb-4 items-end">
                  <div>
                    <Label className="text-gray-300">Property</Label>
                    <Select value={activityPropertyFilter} onValueChange={setActivityPropertyFilter}>
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-40">
                        <SelectValue>{activityPropertyFilter === 'all' ? 'All Properties' : activityPropertyFilter}</SelectValue>
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="all">All Properties</SelectItem>
                        {properties.map(property => (
                          <SelectItem key={property.id} value={property.name}>{property.name}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                            </div>
                  <div>
                    <Label className="text-gray-300">Work Order</Label>
                    <Select value={activityJobFilter} onValueChange={setActivityJobFilter}>
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-40">
                        <SelectValue>{activityJobFilter === 'all' ? 'All Work Orders' : activityJobFilter}</SelectValue>
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="all">All Work Orders</SelectItem>
                        {jobs.map(job => (
                          <SelectItem key={job.id} value={job.description}>{job.description}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                            </div>
                  <div>
                    <Label className="text-gray-300">Activity</Label>
                    <Select value={activityMilestoneFilter} onValueChange={setActivityMilestoneFilter}>
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-40">
                        <SelectValue>{activityMilestoneFilter === 'all' ? 'All Activities' : activityMilestoneFilter}</SelectValue>
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="all">All Activities</SelectItem>
                        {activityMilestonesWithUpdate.map(milestone => (
                          <SelectItem key={milestone.milestone} value={milestone.milestone}>{milestone.milestone}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                            </div>
                  <div>
                    <Label className="text-gray-300">Owner</Label>
                    <Select value={activityOwnerFilter} onValueChange={setActivityOwnerFilter}>
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-32">
                        <SelectValue>{activityOwnerFilter === 'all' ? 'All Owners' : activityOwnerFilter}</SelectValue>
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="all">All Owners</SelectItem>
                        <SelectItem value="PM">PM</SelectItem>
                        <SelectItem value="Technician">Technician</SelectItem>
                        <SelectItem value="Central Office">Central Office</SelectItem>
                      </SelectContent>
                    </Select>
                            </div>
                        </div>

                <div className="overflow-x-auto">
                  <table className="min-w-full text-sm">
                    <thead>
                      <tr className="bg-gray-900 border-b border-gray-700">
                        <th className="text-left py-3 px-4 font-semibold text-white">Property</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Work Order</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Activity</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Owner</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Date</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Files</th>
                      </tr>
                    </thead>
                    <tbody>
                      {(() => {
                        // Generate activity data from jobs and milestones
                        const activities = jobs.flatMap(job => 
                          activityMilestonesWithUpdate.map(milestone => ({
                            ...milestone,
                            job,
                            date: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                            fileKey: `${job.id}-${milestone.milestone.toLowerCase().replace(/\s+/g, '-')}`
                          }))
                        );

                        // Apply filters
                        return activities
                          .filter(activity => {
                            if (activityPropertyFilter !== 'all' && activity.job.property !== activityPropertyFilter) return false;
                            if (activityJobFilter !== 'all' && activity.job.description !== activityJobFilter) return false;
                            if (activityMilestoneFilter !== 'all' && activity.milestone !== activityMilestoneFilter) return false;
                            if (activityOwnerFilter !== 'all' && activity.owner !== activityOwnerFilter) return false;
                            return true;
                          })
                          .map((activity, i) => (
                            <tr key={activity.milestone + i} className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                              <td className="py-3 px-4 text-gray-300">{activity.job.property}</td>
                              <td className="py-3 px-4 text-gray-300">{activity.job.description}</td>
                              <td className="py-3 px-4 text-gray-300">{activity.milestone}</td>
                              <td className="py-3 px-4 text-gray-300">
                                <span className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold ${
                                  activity.owner === 'PM' ? 'bg-blue-700 text-blue-100' :
                                  activity.owner === 'Technician' ? 'bg-green-700 text-green-100' :
                                  'bg-purple-700 text-purple-100'
                                }`}>
                                  {activity.owner}
                                </span>
                              </td>
                              <td className="py-3 px-4 text-gray-300">{activity.date}</td>
                              <td className="py-3 px-4 text-gray-300">
                                {activityFiles[activity.fileKey]?.length > 0 ? (
                                  <Button
                                    size="sm"
                                    variant="ghost"
                                    className="text-blue-400 hover:text-blue-300 p-0 h-auto"
                                    onClick={() => {
                                      // Mock file preview - in real app this would show actual files
                                      alert(`Viewing files for ${activity.milestone}`);
                                    }}
                                  >
                                    <Eye className="h-3 w-3" />
                            </Button>
                                ) : '-'}
                              </td>
                            </tr>
                          ));
                      })()}
                    </tbody>
                  </table>
                          </div>
              </>
            )}
            {activeTab === "payments" && (
              <>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-white">Trust Account Reimbursements</h3>
                  <div className="flex items-center space-x-4">
                    <div className="text-sm text-gray-400">
                      Manage reimbursements for logged transactions by work order
                    </div>
                    <Button 
                      onClick={() => setMonthlyReportDialogOpen(true)}
                      className="bg-blue-600 hover:bg-blue-700 text-white"
                      size="sm"
                    >
                      <FileText className="h-4 w-4 mr-2" />
                      Monthly Reports
                    </Button>
                  </div>
                </div>

                {/* Trust Account Summary */}
                <div className="mb-6">
                  <h4 className="text-md font-semibold text-white mb-3">Trust Account Balances</h4>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {properties.map((property) => {
                      const ytdSpending = getPropertyYTDSpending(property.name);
                      return (
                        <Card key={property.id} className="bg-gray-800 border-gray-700">
                          <CardContent className="p-4">
                            <div className="flex justify-between items-start mb-2">
                              <div className="text-sm font-medium text-white">{property.name}</div>
                            </div>
                            <div className="text-2xl font-bold text-white mb-1">
                              ${property.trustBalance.toLocaleString()}
                            </div>
                            <div className="text-sm text-gray-400 mb-2">
                              Trust Balance
                            </div>
                            <div className="text-lg font-semibold text-blue-400 mb-1">
                              ${ytdSpending.toLocaleString()}
                            </div>
                            <div className="text-xs text-gray-400">
                              YTD Spending • Last sync: {property.lastSync}
                            </div>
                          </CardContent>
                        </Card>
                      );
                    })}
                  </div>
                </div>

                {/* Work Orders with Transactions */}
                <div className="space-y-6">
                  <h4 className="text-md font-semibold text-white mb-3">Pending Reimbursements by Work Order</h4>
                  
                  {properties.map((property) => {
                    // Get all transactions for this property's work orders
                    const propertyJobs = jobs.filter(job => job.property === property.name);
                    const propertyTransactions = [...transactions, ...technicianTransactions].filter(txn => {
                      const job = jobs.find(j => j.id === txn.jobId);
                      return job && job.property === property.name && txn.status === 'pending';
                    });

                    // Group transactions by work order
                    const workOrderGroups = propertyJobs.map(job => {
                      const jobTransactions = propertyTransactions.filter(txn => txn.jobId === job.id);
                      const totalAmount = jobTransactions.reduce((sum, txn) => sum + txn.amount, 0);
                      
                      return {
                        job,
                        transactions: jobTransactions,
                        totalAmount,
                        property
                      };
                    }).filter(group => group.transactions.length > 0);

                    if (workOrderGroups.length === 0) return null;

                    return (
                      <div key={property.id} className="bg-gray-800 rounded-lg p-6">
                        <div className="flex justify-between items-center mb-4">
                          <h5 className="text-lg font-semibold text-white">{property.name}</h5>
                          <div className="text-sm text-gray-400">
                            {workOrderGroups.length} work order{workOrderGroups.length !== 1 ? 's' : ''} with pending reimbursements
                          </div>
                        </div>

                        <div className="space-y-3">
                          {workOrderGroups.map((group) => {
                            const isExpanded = expandedWorkOrders.has(group.job.id);
                            return (
                              <div key={group.job.id} className="bg-gray-700 rounded-lg border border-gray-600">
                                {/* Work Order Header - Always Visible */}
                                <div 
                                  className="p-4 cursor-pointer hover:bg-gray-600/50 transition-colors"
                                  onClick={() => toggleWorkOrderExpansion(group.job.id)}
                                >
                                  <div className="flex justify-between items-center">
                                    <div className="flex items-center space-x-3">
                                      <div className={`transition-transform ${isExpanded ? 'rotate-90' : ''}`}>
                                        <ChevronRight className="h-4 w-4 text-gray-400" />
                                      </div>
                                      <div>
                                        <h6 className="font-medium text-white">{group.job.description}</h6>
                                        <div className="text-sm text-gray-400">
                                          Work Order #{group.job.id} • {group.job.technician || 'Unassigned'}
                                        </div>
                                      </div>
                                    </div>
                                    <div className="flex items-center space-x-4">
                                      <div className="text-right">
                                        <div className="text-lg font-bold text-white">
                                          ${group.totalAmount.toFixed(2)}
                                        </div>
                                        <div className="text-sm text-gray-400">
                                          {group.transactions.length} transaction{group.transactions.length !== 1 ? 's' : ''}
                                        </div>
                                      </div>
                                      <Button 
                                        onClick={(e) => {
                                          e.stopPropagation();
                                          handleReimburseWorkOrder(group.job, group.totalAmount);
                                        }}
                                        className="bg-green-600 hover:bg-green-700 text-white"
                                        size="sm"
                                      >
                                        <DollarSign className="h-4 w-4 mr-2" />
                                        Reimburse
                                      </Button>
                                    </div>
                                  </div>
                                </div>

                                {/* Collapsible Transactions Section */}
                                {isExpanded && (
                                  <div className="border-t border-gray-600 p-4 bg-gray-800/50">
                                    <div className="mb-3">
                                      <h6 className="text-sm font-medium text-gray-300">Transaction Details</h6>
                                    </div>
                                    <div className="overflow-x-auto">
                                      <table className="w-full text-sm min-w-[500px] table-fixed">
                                        <thead>
                                          <tr className="border-b border-gray-600">
                                            <th className="text-left py-2 text-gray-400 w-1/4">Date</th>
                                            <th className="text-left py-2 text-gray-400 w-1/4">Vendor</th>
                                            <th className="text-left py-2 text-gray-400 w-1/4">Made By</th>
                                            <th className="text-right py-2 text-gray-400 w-1/4">Amount</th>
                                          </tr>
                                        </thead>
                                        <tbody>
                                          {group.transactions.map((txn) => (
                                            <tr key={txn.id} className="border-b border-gray-600/50">
                                              <td className="py-2 text-gray-300">{txn.date}</td>
                                              <td className="py-2 text-gray-300">{txn.vendor}</td>
                                              <td className="py-2 text-gray-300">{txn.madeBy}</td>
                                              <td className="py-2 text-right text-gray-300">${txn.amount.toFixed(2)}</td>
                                            </tr>
                                          ))}
                                        </tbody>
                                      </table>
                                    </div>
                                  </div>
                                )}
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    );
                  })}
                </div>

                {/* Reimbursement Dialog */}
                <Dialog open={reimbursementDialogOpen} onOpenChange={setReimbursementDialogOpen}>
                  <DialogContent className="bg-gray-900 border-gray-700 text-white max-w-md">
                    <DialogHeader>
                      <DialogTitle>Process Reimbursement</DialogTitle>
                      <DialogDescription>
                        Review and process reimbursement for this work order
                      </DialogDescription>
                    </DialogHeader>
                    
                    {selectedReimbursementJob && (
                      <div className="space-y-4">
                        <div className="bg-gray-800 p-4 rounded-lg">
                          <div className="text-sm text-gray-400 mb-1">Work Order</div>
                          <div className="font-medium text-white">{selectedReimbursementJob.description}</div>
                          <div className="text-sm text-gray-400">#{selectedReimbursementJob.id}</div>
                        </div>
                        
                        <div className="bg-gray-800 p-4 rounded-lg">
                          <div className="text-sm text-gray-400 mb-1">Reimbursement Amount</div>
                          <div className="text-2xl font-bold text-white">${reimbursementAmount.toFixed(2)}</div>
                        </div>
                        
                        <div>
                          <Label htmlFor="reimbursement-note" className="text-sm text-gray-400">
                            Notes (Optional)
                          </Label>
                          <Textarea
                            id="reimbursement-note"
                            value={reimbursementNote}
                            onChange={(e) => setReimbursementNote(e.target.value)}
                            placeholder="Add any notes about this reimbursement..."
                            className="bg-gray-800 border-gray-600 text-white mt-1"
                          />
                        </div>
                      </div>
                    )}
                    
                    <DialogFooter>
                      <Button variant="outline" onClick={() => setReimbursementDialogOpen(false)}>
                        Cancel
                      </Button>
                      <Button onClick={processReimbursement} className="bg-green-600 hover:bg-green-700">
                        Process Reimbursement
                      </Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>

                {/* Monthly Report Dialog */}
                <Dialog open={monthlyReportDialogOpen} onOpenChange={setMonthlyReportDialogOpen}>
                  <DialogContent className="bg-gray-900 border-gray-700 text-white max-w-4xl max-h-[80vh] overflow-y-auto">
                    <DialogHeader>
                      <DialogTitle>Monthly Spending Report</DialogTitle>
                      <DialogDescription>
                        Generate detailed monthly spending reports for properties
                      </DialogDescription>
                    </DialogHeader>
                    
                    <div className="space-y-6">
                      {/* Property and Month Selection */}
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <Label htmlFor="report-property" className="text-sm text-gray-400">
                            Property
                          </Label>
                          <Select 
                            value={selectedReportProperty?.id || ''} 
                            onValueChange={(value) => {
                              const property = properties.find(p => p.id === value);
                              setSelectedReportProperty(property || null);
                            }}
                          >
                            <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                              <SelectValue placeholder="Select a property" />
                            </SelectTrigger>
                            <SelectContent className="bg-gray-900 border-gray-700 text-white">
                              {properties.map(property => (
                                <SelectItem key={property.id} value={property.id} className="bg-gray-900 text-white">
                                  {property.name}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div>
                          <Label htmlFor="report-month" className="text-sm text-gray-400">
                            Month
                          </Label>
                          <Input
                            id="report-month"
                            type="month"
                            value={reportMonth}
                            onChange={(e) => setReportMonth(e.target.value)}
                            className="bg-gray-800 border-gray-600 text-white"
                          />
                        </div>
                      </div>

                      {/* Report Preview */}
                      {selectedReportProperty && (
                        <div className="space-y-4">
                          <div className="bg-gray-800 p-4 rounded-lg">
                            <h4 className="text-lg font-semibold text-white mb-3">
                              Report Preview - {selectedReportProperty.name} ({reportMonth})
                            </h4>
                            
                            {(() => {
                              const reportData = generateMonthlyReportData(selectedReportProperty, reportMonth);
                              const { summary, workOrderGroups } = reportData;
                              
                              return (
                                <div className="space-y-4">
                                  {/* Summary Cards */}
                                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                    <Card className="bg-gray-700 border-gray-600">
                                      <CardContent className="p-3">
                                        <div className="text-xs text-gray-400">Total Spend</div>
                                        <div className="text-lg font-bold text-white">${summary.totalSpend.toFixed(2)}</div>
                                      </CardContent>
                                    </Card>
                                    <Card className="bg-gray-700 border-gray-600">
                                      <CardContent className="p-3">
                                        <div className="text-xs text-gray-400">Billable</div>
                                        <div className="text-lg font-bold text-green-400">${summary.billableSpend.toFixed(2)}</div>
                                      </CardContent>
                                    </Card>
                                    <Card className="bg-gray-700 border-gray-600">
                                      <CardContent className="p-3">
                                        <div className="text-xs text-gray-400">Non-Billable</div>
                                        <div className="text-lg font-bold text-gray-400">${summary.nonBillableSpend.toFixed(2)}</div>
                                      </CardContent>
                                    </Card>
                                    <Card className="bg-gray-700 border-gray-600">
                                      <CardContent className="p-3">
                                        <div className="text-xs text-gray-400">Transactions</div>
                                        <div className="text-lg font-bold text-blue-400">{summary.transactionCount}</div>
                                      </CardContent>
                                    </Card>
                                  </div>

                                  {/* Work Order Summary */}
                                  {workOrderGroups.length > 0 ? (
                                    <div>
                                      <h5 className="text-md font-semibold text-white mb-2">Work Orders with Expenses</h5>
                                      <div className="bg-gray-700 rounded-lg overflow-hidden">
                                        <table className="w-full text-sm">
                                          <thead>
                                            <tr className="bg-gray-800 border-b border-gray-600">
                                              <th className="text-left p-3 text-gray-300">Work Order</th>
                                              <th className="text-left p-3 text-gray-300">Technician</th>
                                              <th className="text-right p-3 text-gray-300">Total</th>
                                              <th className="text-right p-3 text-gray-300">Billable</th>
                                              <th className="text-right p-3 text-gray-300">Non-Billable</th>
                                              <th className="text-center p-3 text-gray-300">Transactions</th>
                                            </tr>
                                          </thead>
                                          <tbody>
                                            {workOrderGroups.map(group => (
                                              <tr key={group.job.id} className="border-b border-gray-600/50">
                                                <td className="p-3 text-white">{group.job.description}</td>
                                                <td className="p-3 text-gray-300">{group.job.technician || 'Unassigned'}</td>
                                                <td className="p-3 text-right text-white">${group.totalAmount.toFixed(2)}</td>
                                                <td className="p-3 text-right text-green-400">${group.billableAmount.toFixed(2)}</td>
                                                <td className="p-3 text-right text-gray-400">${group.nonBillableAmount.toFixed(2)}</td>
                                                <td className="p-3 text-center text-blue-400">{group.transactionCount}</td>
                                              </tr>
                                            ))}
                                          </tbody>
                                        </table>
                                      </div>
                                    </div>
                                  ) : (
                                    <div className="text-center py-8 text-gray-400">
                                      No expenses found for this property in {reportMonth}
                                    </div>
                                  )}
                                </div>
                              );
                            })()}
                          </div>
                        </div>
                      )}
                    </div>
                    
                    <DialogFooter>
                      <Button variant="outline" onClick={() => setMonthlyReportDialogOpen(false)}>
                        Cancel
                      </Button>
                      {selectedReportProperty && (
                        <Button 
                          onClick={() => {
                            const reportData = generateMonthlyReportData(selectedReportProperty, reportMonth);
                            exportMonthlyReportToCSV(reportData);
                          }}
                          className="bg-blue-600 hover:bg-blue-700"
                        >
                          <Download className="h-4 w-4 mr-2" />
                          Export to CSV
                        </Button>
                      )}
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </>
            )}
            {activeTab === "wallet" && (
              <>
                <div className="mb-8">
                  <h3 className="text-lg font-semibold text-white mb-4">
                    {role === 'technician' ? `Active Cards for ${technicianName}` : 'Active Cards'}
                  </h3>
                  {/* Filters for job and property */}
                  <div className="flex gap-6 overflow-x-auto pb-2">
                    {(role === 'technician' ? technicianCards : properties[0].cards.slice(0, 2)).map((card, idx) => {
                      // Mock card data for demo
                      const brand = idx % 2 === 0 ? "Amex" : "Chase";
                      const brandColor = brand === "Amex" ? "from-cyan-700 to-blue-900" : "from-indigo-700 to-purple-900";
                      const available = card.balance;
                      const limit = 5000;
                      const percent = Math.min(100, Math.round((available / limit) * 100));
                      return (
                        <div key={card.id} className={`relative w-80 h-48 rounded-2xl shadow-xl bg-gradient-to-br ${brandColor} p-6 flex flex-col justify-between text-white`}>
                          <div className="flex justify-between items-center mb-2">
                            <span className="text-lg font-bold tracking-wide">{brand}</span>
                            <CreditCard className="h-7 w-7 text-white/80" />
                                </div>
                          <div className="text-2xl font-mono tracking-widest mb-2">{card.number}</div>
                          <div className="flex justify-between text-xs mb-2">
                            <span>Exp: 12/26</span>
                            <span>Limit: ${limit.toLocaleString()}</span>
                              </div>
                          <div className="flex justify-between items-end text-xs mb-1">
                            <span>Available: <span className="font-semibold">${available.toLocaleString()}</span></span>
                            <span className="text-white/70">John Smith</span>
                              </div>
                          <div className="w-full h-2 bg-white/20 rounded-full overflow-hidden mt-1">
                            <div className="h-full rounded-full bg-green-400 transition-all" style={{ width: `${percent}%` }} />
                              </div>
                              </div>
                      );
                    })}
                              </div>
                        </div>

                {/* Completed Expenses Table */}
                <div className="mb-8">
                  <h3 className="text-lg font-semibold text-white mb-4">Completed Expenses</h3>
                  <div className="overflow-x-auto">
                    <table className="min-w-full text-sm">
                      <thead className="sticky top-0 z-10">
                        <tr className="bg-gray-900 border-b border-gray-700">
                          <th className="text-left py-3 px-4 font-semibold text-white">Date</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Merchant</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Amount</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Made By</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Property</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Work Order</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Billable</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Memo</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Receipt</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {filterExpensesByRole([...transactions, ...technicianTransactions])
                          .filter(txn => txn.status === 'reconciled' && (txn.jobId || txnAssignments[txn.id]?.job))
                          .map((txn, idx) => {
                            const assignment = txnAssignments[txn.id] || {};
                            const memo = txnMemos[txn.id] || '';
                            const receipt = txnReceipts[txn.id] || null;
                            const job = jobs.find(j => j.id === txn.jobId);
                            const property = job ? properties.find(p => p.name === job.property) : undefined;
                            const isEditing = editingExpense && editingExpense.id === txn.id;
                            return (
                              <tr key={txn.id} className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                                <td className="py-3 px-4 text-gray-300">{txn.date}</td>
                                <td className="py-3 px-4 text-gray-300">{txn.vendor}</td>
                                <td className="py-3 px-4 text-gray-300">${txn.amount.toFixed(2)}</td>
                                <td className="py-3 px-4 text-gray-300">{txn.madeBy}</td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Select
                                      value={expenseForm.property}
                                      onValueChange={value => setExpenseForm(prev => ({ ...prev, property: value }))}
                                    >
                                      <SelectTrigger className="bg-gray-700 border-gray-600 text-white w-32">
                                        <SelectValue placeholder="Property" />
                                      </SelectTrigger>
                                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                                        {properties.map(property => (
                                          <SelectItem key={property.id} value={property.name} className="bg-gray-900 text-white">
                                            {property.name}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  ) : (
                                    assignment.property || (property ? property.name : 'Not Assigned')
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Select
                                      value={expenseForm.job}
                                      onValueChange={value => setExpenseForm(prev => ({ ...prev, job: value }))}
                                    >
                                      <SelectTrigger className="bg-gray-700 border-gray-600 text-white w-32">
                                        <SelectValue placeholder="Job" />
                                      </SelectTrigger>
                                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                                        <SelectItem value="none" className="bg-gray-900 text-white">No job assigned</SelectItem>
                                        {jobs.map(job => (
                                          <SelectItem key={job.id} value={job.id} className="bg-gray-900 text-white">
                                            {job.description}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  ) : (
                                    assignment.job ? (jobs.find(j => j.id === assignment.job)?.description || assignment.job) : (job ? job.description : 'Not Assigned')
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Select
                                      value={expenseForm.billable ? 'yes' : 'no'}
                                      onValueChange={value => setExpenseForm(prev => ({ ...prev, billable: value === 'yes' }))}
                                    >
                                      <SelectTrigger className="bg-gray-700 border-gray-600 text-white w-24">
                                        <SelectValue placeholder="Billable" />
                                      </SelectTrigger>
                                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                                        <SelectItem value="yes" className="bg-gray-900 text-white">Yes</SelectItem>
                                        <SelectItem value="no" className="bg-gray-900 text-white">No</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  ) : (
                                    <span className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold ${txn.billable ? 'bg-green-700 text-green-100' : 'bg-gray-700 text-gray-200'}`}>
                                      {txn.billable ? 'Yes' : 'No'}
                                    </span>
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Input
                                      className="bg-gray-700 border-gray-600 text-white w-32 text-xs"
                                      placeholder="Memo"
                                      value={expenseForm.memo}
                                      onChange={e => setExpenseForm(prev => ({ ...prev, memo: e.target.value }))}
                                    />
                                  ) : (
                                    txn.memo || '-'
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <div className="flex items-center gap-2">
                                      <label className="cursor-pointer">
                                        <input
                                          type="file"
                                          accept="image/*,application/pdf"
                                          className="hidden"
                                          onChange={e => {
                                            const file = e.target.files?.[0] || null;
                                            setExpenseForm(prev => ({ ...prev, receipt: file ? file.name : '' }));
                                          }}
                                        />
                                        <Paperclip className="h-4 w-4 text-blue-400 hover:text-blue-300" />
                                      </label>
                                      {expenseForm.receipt && (
                                        <span className="text-xs text-green-400">{expenseForm.receipt}</span>
                                      )}
                                    </div>
                                  ) : (
                                    txn.receipt ? <FileText className="h-4 w-4 text-blue-400" /> : '-'
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <div className="flex gap-2">
                                      <Button
                                        size="sm"
                                        className="bg-green-600 hover:bg-green-700 text-white"
                                        disabled={!expenseForm.property || !expenseForm.memo || !expenseForm.receipt}
                                        onClick={() => {
                                          if (expenseForm.property && expenseForm.memo && expenseForm.receipt) {
                                            const updatedTxn = {
                                              ...txn,
                                              jobId: expenseForm.job === 'none' ? '' : expenseForm.job,
                                              billable: expenseForm.billable,
                                              memo: expenseForm.memo,
                                              receipt: expenseForm.receipt,
                                              status: 'reconciled' as const // ensure status is valid and typed
                                            };
                                            setTransactions(prev => prev.map(t => t.id === txn.id ? updatedTxn : t));
                                            setEditingExpense(null);
                                            setExpenseForm({
                                              property: '',
                                              job: '',
                                              billable: true,
                                              memo: '',
                                              receipt: ''
                                            });
                                          }
                                        }}
                                      >
                                        <CheckCircle className="h-4 w-4" />
                                      </Button>
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        className="border-gray-600 text-gray-300 hover:bg-gray-700"
                                        onClick={() => {
                                          setEditingExpense(null);
                                          setExpenseForm({
                                            property: '',
                                            job: '',
                                            billable: true,
                                            memo: '',
                                            receipt: ''
                                          });
                                        }}
                                      >
                                        <XCircle className="h-4 w-4" />
                                      </Button>
                            </div>
                                  ) : (
                          <Button
                                      size="sm"
                                      className="bg-blue-600 hover:bg-blue-700 text-white"
                                      onClick={() => {
                                        setEditingExpense(txn as Transaction);
                                        setExpenseForm({
                                          property: assignment.property || (property ? property.name : ''),
                                          job: assignment.job || (job ? job.id : ''),
                                          billable: txn.billable,
                                          memo: txn.memo || '',
                                          receipt: txn.receipt || ''
                                        });
                                      }}
                                    >
                                      <Pencil className="h-4 w-4" />
                          </Button>
                                  )}
                                </td>
                              </tr>
                            );
                          })}
                      </tbody>
                    </table>
                        </div>
                        </div>

                {/* Uncategorized / Needs Review Table */}
                <div className="mb-8">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-semibold text-white">Uncategorized / Needs Review</h3>
                    <Button className="bg-blue-600 hover:bg-blue-700" onClick={() => setNewExpenseDialogOpen(true)}>
                      <Plus className="h-4 w-4 mr-2" />
                      Add Expense
                    </Button>
                  </div>
                  <div className="overflow-x-auto">
                    <table className="min-w-full text-sm">
                      <thead className="sticky top-0 z-10">
                        <tr className="bg-gray-900 border-b border-gray-700">
                          <th className="text-left py-3 px-4 font-semibold text-white">Date</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Merchant</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Amount</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Made By</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Property</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Work Order</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Billable</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Memo</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Receipt</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {filterExpensesByRole([...transactions, ...technicianTransactions])
                          .filter(txn => txn.status === 'pending' || !txn.jobId)
                          .map((txn, idx) => {
                            const job = jobs.find(j => j.id === txn.jobId);
                            const property = job ? properties.find(p => p.name === job.property) : undefined;
                            const isEditing = inlineEditingExpense === txn.id;
                            
                            return (
                              <tr key={txn.id} className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                                <td className="py-3 px-4 text-gray-300">{txn.date}</td>
                                <td className="py-3 px-4 text-gray-300">{txn.vendor}</td>
                                <td className="py-3 px-4 text-gray-300">${txn.amount.toFixed(2)}</td>
                                <td className="py-3 px-4 text-gray-300">{txn.madeBy}</td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Select 
                                      value={inlineExpenseForm.property} 
                                      onValueChange={(value) => setInlineExpenseForm(prev => ({ ...prev, property: value }))}
                                    >
                                      <SelectTrigger className="bg-gray-700 border-gray-600 text-white w-32">
                                        <SelectValue placeholder="Property" />
                                      </SelectTrigger>
                                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                                        {properties.map(property => (
                                          <SelectItem key={property.id} value={property.name} className="bg-gray-900 text-white">
                                            {property.name}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  ) : (
                                    <span className="text-gray-300">{property ? property.name : 'Not Assigned'}</span>
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Select 
                                      value={inlineExpenseForm.job} 
                                      onValueChange={(value) => setInlineExpenseForm(prev => ({ ...prev, job: value }))}
                                    >
                                      <SelectTrigger className="bg-gray-700 border-gray-600 text-white w-32">
                                        <SelectValue placeholder="Job" />
                                      </SelectTrigger>
                                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                                        <SelectItem value="none" className="bg-gray-900 text-white">No job assigned</SelectItem>
                                        {jobs.map(job => (
                                          <SelectItem key={job.id} value={job.id} className="bg-gray-900 text-white">
                                            {job.description}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  ) : (
                                    <span className="text-gray-300">{job ? job.description : 'Not Assigned'}</span>
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Select
                                      value={inlineExpenseForm.billable ? 'yes' : 'no'}
                                      onValueChange={value => setInlineExpenseForm(prev => ({ ...prev, billable: value === 'yes' }))}
                                    >
                                      <SelectTrigger className="bg-gray-700 border-gray-600 text-white w-24">
                                        <SelectValue placeholder="Billable" />
                                      </SelectTrigger>
                                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                                        <SelectItem value="yes" className="bg-gray-900 text-white">Yes</SelectItem>
                                        <SelectItem value="no" className="bg-gray-900 text-white">No</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  ) : (
                                    <span className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold ${txn.billable ? 'bg-green-700 text-green-100' : 'bg-gray-700 text-gray-200'}`}>
                                      {txn.billable ? 'Yes' : 'No'}
                                    </span>
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Input
                                      className="bg-gray-700 border-gray-600 text-white w-32 text-xs"
                                      placeholder="Memo"
                                      value={inlineExpenseForm.memo}
                                      onChange={e => setInlineExpenseForm(prev => ({ ...prev, memo: e.target.value }))}
                                    />
                                  ) : (
                                    <span className="text-gray-300">{txn.memo || '-'}</span>
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <div className="flex items-center gap-2">
                                      <label className="cursor-pointer">
                                        <input
                                          type="file"
                                          accept="image/*,application/pdf"
                                          className="hidden"
                                          onChange={e => {
                                            const file = e.target.files?.[0] || null;
                                            setInlineExpenseForm(prev => ({ ...prev, receipt: file ? file.name : '' }));
                                          }}
                                        />
                                        <Paperclip className="h-4 w-4 text-blue-400 hover:text-blue-300" />
                                      </label>
                                      {inlineExpenseForm.receipt && (
                                        <span className="text-xs text-green-400">{inlineExpenseForm.receipt}</span>
                                      )}
                                  </div>
                                  ) : (
                                    <span className="text-gray-300">{txn.receipt ? '✓' : '-'}</span>
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <div className="flex gap-2">
                                      <Button
                                        size="sm"
                                        className="bg-green-600 hover:bg-green-700 text-white"
                                        disabled={!inlineExpenseForm.property || !inlineExpenseForm.memo || !inlineExpenseForm.receipt}
                                        onClick={() => {
                                          if (inlineExpenseForm.property && inlineExpenseForm.memo && inlineExpenseForm.receipt) {
                                            // Update the transaction
                                            const updatedTxn = {
                                              ...txn,
                                              status: 'reconciled' as const,
                                              jobId: inlineExpenseForm.job === 'none' ? '' : inlineExpenseForm.job,
                                              memo: inlineExpenseForm.memo,
                                              receipt: inlineExpenseForm.receipt
                                            };
                                            
                                            setTransactions(prev => 
                                              prev.map(t => t.id === txn.id ? updatedTxn : t)
                                            );
                                            
                                            setInlineEditingExpense(null);
                                            setInlineExpenseForm({
                                              property: '',
                                              job: '',
                                              billable: true,
                                              memo: '',
                                              receipt: ''
                                            });
                                          }
                                        }}
                                      >
                                        <CheckCircle className="h-4 w-4" />
                                      </Button>
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        className="border-gray-600 text-gray-300 hover:bg-gray-700"
                                        onClick={() => {
                                          setInlineEditingExpense(null);
                                          setInlineExpenseForm({
                                            property: '',
                                            job: '',
                                            billable: true,
                                            memo: '',
                                            receipt: ''
                                          });
                                        }}
                                      >
                                        <XCircle className="h-4 w-4" />
                                      </Button>
                                  </div>
                                  ) : (
                                    <Button
                                      size="sm"
                                      className="bg-blue-600 hover:bg-blue-700 text-white"
                                      onClick={() => {
                                        setInlineEditingExpense(txn.id);
                                        setInlineExpenseForm({
                                          property: property ? property.name : '',
                                          job: job ? job.id : '',
                                          billable: txn.billable,
                                          memo: txn.memo || '',
                                          receipt: ''
                                        });
                                      }}
                                    >
                                      <CheckCircle className="h-4 w-4" />
                                    </Button>
                                  )}
                                </td>
                              </tr>
                            );
                          })}
                      </tbody>
                    </table>
                                </div>
                </div>
              </>
            )}
            {activeTab === "technicianExpenses" && (
              <>
                <div className="mb-8">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-semibold text-white mb-4">My Expenses - {technicianName}</h3>
                    <Button 
                      className="bg-green-600 hover:bg-green-700 text-white flex items-center gap-2"
                      onClick={() => setHelpRequestDialogOpen(true)}
                    >
                      <MessageSquare className="h-4 w-4" />
                      Ask Central Office
                    </Button>
                  </div>
                  <div className="flex gap-6 overflow-x-auto pb-2">
                    {technicianCards.map((card, idx) => {
                      // Mock card data for demo
                      const brand = idx % 2 === 0 ? "Amex" : "Chase";
                      const brandColor = brand === "Amex" ? "from-cyan-700 to-blue-900" : "from-indigo-700 to-purple-900";
                      const available = card.balance;
                      const limit = 5000;
                      const percent = Math.min(100, Math.round((available / limit) * 100));
                      return (
                        <div key={card.id} className={`relative w-80 h-48 rounded-2xl shadow-xl bg-gradient-to-br ${brandColor} p-6 flex flex-col justify-between text-white`}>
                          <div className="flex justify-between items-center mb-2">
                            <span className="text-lg font-bold tracking-wide">{brand}</span>
                            <CreditCard className="h-7 w-7 text-white/80" />
                          </div>
                          <div className="text-2xl font-mono tracking-widest mb-2">{card.number}</div>
                          <div className="flex justify-between text-xs mb-2">
                            <span>Exp: 12/26</span>
                            <span>Limit: ${limit.toLocaleString()}</span>
                          </div>
                          <div className="flex justify-between items-end text-xs mb-1">
                            <span>Available: <span className="font-semibold">${available.toLocaleString()}</span></span>
                            <span className="text-white/70">{technicianName}</span>
                          </div>
                          <div className="w-full h-2 bg-white/20 rounded-full overflow-hidden mt-1">
                            <div className="h-full rounded-full bg-green-400 transition-all" style={{ width: `${percent}%` }} />
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* My Completed Expenses Table */}
                <div className="mb-8">
                  <h3 className="text-lg font-semibold text-white mb-4">My Completed Expenses</h3>
                  <div className="overflow-x-auto">
                    <table className="min-w-full text-sm">
                      <thead className="sticky top-0 z-10">
                        <tr className="bg-gray-900 border-b border-gray-700">
                          <th className="text-left py-3 px-4 font-semibold text-white">Date</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Merchant</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Amount</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Made By</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Property</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Work Order</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Billable</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Memo</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Receipt</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {[...transactions, ...technicianTransactions]
                          .filter(txn => txn.cardHolder === technicianName && txn.status === 'reconciled' && (txn.jobId || txnAssignments[txn.id]?.job))
                          .map((txn, idx) => {
                            const job = jobs.find(j => j.id === txn.jobId);
                            const property = job ? properties.find(p => p.name === job.property) : undefined;
                            return (
                              <tr key={txn.id} className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                                <td className="py-3 px-4 text-gray-300">{txn.date}</td>
                                <td className="py-3 px-4 text-gray-300">{txn.vendor}</td>
                                <td className="py-3 px-4 text-gray-300">${txn.amount.toFixed(2)}</td>
                                <td className="py-3 px-4 text-gray-300">{txn.madeBy}</td>
                                <td className="py-3 px-4 text-gray-300">{property ? property.name : 'Not Assigned'}</td>
                                <td className="py-3 px-4 text-gray-300">{job ? job.description : 'Not Assigned'}</td>
                                <td className="py-3 px-4">
                                  <span className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold ${txn.billable ? 'bg-green-700 text-green-100' : 'bg-gray-700 text-gray-200'}`}>
                                    {txn.billable ? 'Yes' : 'No'}
                                  </span>
                                </td>
                                <td className="py-3 px-4 text-gray-300">{txn.memo || '-'}</td>
                                <td className="py-3 px-4 text-gray-300">
                                  {txn.receipt ? <FileText className="h-4 w-4 text-blue-400" /> : '-'}
                                </td>
                                <td className="py-3 px-4">
                                  <Button
                                    size="icon"
                                    variant="ghost"
                                    className="h-8 w-8 text-gray-300 hover:text-white hover:bg-blue-500/20"
                                    onClick={() => {
                                      setSelectedTransaction(txn as Transaction);
                                      setTransactionDetailsOpen(true);
                                    }}
                                  >
                                    <Eye className="h-4 w-4" />
                                  </Button>
                                </td>
                              </tr>
                            );
                          })}
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* My Pending Expenses Table */}
                <div className="mb-8">
                  <h3 className="text-lg font-semibold text-white mb-4">My Pending Expenses</h3>
                  <div className="overflow-x-auto">
                    <table className="min-w-full text-sm">
                      <thead className="sticky top-0 z-10">
                        <tr className="bg-gray-900 border-b border-gray-700">
                          <th className="text-left py-3 px-4 font-semibold text-white">Date</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Merchant</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Amount</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Made By</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Property</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Work Order</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Billable</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Memo</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Receipt</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {[...transactions, ...technicianTransactions]
                          .filter(txn => txn.cardHolder === technicianName && (txn.status === 'pending' || !txn.jobId))
                          .map((txn, idx) => {
                            const job = jobs.find(j => j.id === txn.jobId);
                            const property = job ? properties.find(p => p.name === job.property) : undefined;
                            const isEditing = inlineEditingExpense === txn.id;
                            
                            return (
                              <tr key={txn.id} className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                                <td className="py-3 px-4 text-gray-300">{txn.date}</td>
                                <td className="py-3 px-4 text-gray-300">{txn.vendor}</td>
                                <td className="py-3 px-4 text-gray-300">${txn.amount.toFixed(2)}</td>
                                <td className="py-3 px-4 text-gray-300">{txn.madeBy}</td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Select 
                                      value={inlineExpenseForm.property} 
                                      onValueChange={(value) => setInlineExpenseForm(prev => ({ ...prev, property: value }))}
                                    >
                                      <SelectTrigger className="bg-gray-700 border-gray-600 text-white w-32">
                                        <SelectValue placeholder="Property" />
                                      </SelectTrigger>
                                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                                        {properties.map(property => (
                                          <SelectItem key={property.id} value={property.name} className="bg-gray-900 text-white">
                                            {property.name}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  ) : (
                                    <span className="text-gray-300">{property ? property.name : 'Not Assigned'}</span>
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Select 
                                      value={inlineExpenseForm.job} 
                                      onValueChange={(value) => setInlineExpenseForm(prev => ({ ...prev, job: value }))}
                                    >
                                      <SelectTrigger className="bg-gray-700 border-gray-600 text-white w-32">
                                        <SelectValue placeholder="Job" />
                                      </SelectTrigger>
                                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                                        <SelectItem value="none" className="bg-gray-900 text-white">No job assigned</SelectItem>
                                        {jobs.map(job => (
                                          <SelectItem key={job.id} value={job.id} className="bg-gray-900 text-white">
                                            {job.description}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  ) : (
                                    <span className="text-gray-300">{job ? job.description : 'Not Assigned'}</span>
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Select
                                      value={inlineExpenseForm.billable ? 'yes' : 'no'}
                                      onValueChange={value => setInlineExpenseForm(prev => ({ ...prev, billable: value === 'yes' }))}
                                    >
                                      <SelectTrigger className="bg-gray-700 border-gray-600 text-white w-24">
                                        <SelectValue placeholder="Billable" />
                                      </SelectTrigger>
                                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                                        <SelectItem value="yes" className="bg-gray-900 text-white">Yes</SelectItem>
                                        <SelectItem value="no" className="bg-gray-900 text-white">No</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  ) : (
                                    <span className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold ${txn.billable ? 'bg-green-700 text-green-100' : 'bg-gray-700 text-gray-200'}`}>
                                      {txn.billable ? 'Yes' : 'No'}
                                    </span>
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <Input
                                      className="bg-gray-700 border-gray-600 text-white w-32 text-xs"
                                      placeholder="Memo"
                                      value={inlineExpenseForm.memo}
                                      onChange={e => setInlineExpenseForm(prev => ({ ...prev, memo: e.target.value }))}
                                    />
                                  ) : (
                                    <span className="text-gray-300">{txn.memo || '-'}</span>
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <div className="flex items-center gap-2">
                                      <label className="cursor-pointer">
                                        <input
                                          type="file"
                                          accept="image/*,application/pdf"
                                          className="hidden"
                                          onChange={e => {
                                            const file = e.target.files?.[0] || null;
                                            setInlineExpenseForm(prev => ({ ...prev, receipt: file ? file.name : '' }));
                                          }}
                                        />
                                        <Paperclip className="h-4 w-4 text-blue-400 hover:text-blue-300" />
                                      </label>
                                      {inlineExpenseForm.receipt && (
                                        <span className="text-xs text-green-400">{inlineExpenseForm.receipt}</span>
                                      )}
                                  </div>
                                  ) : (
                                    <span className="text-gray-300">{txn.receipt ? '✓' : '-'}</span>
                                  )}
                                </td>
                                <td className="py-3 px-4">
                                  {isEditing ? (
                                    <div className="flex gap-2">
                                      <Button
                                        size="sm"
                                        className="bg-green-600 hover:bg-green-700 text-white"
                                        disabled={!inlineExpenseForm.property || !inlineExpenseForm.memo || !inlineExpenseForm.receipt}
                                        onClick={() => {
                                          if (inlineExpenseForm.property && inlineExpenseForm.memo && inlineExpenseForm.receipt) {
                                            // Update the transaction
                                            const updatedTxn = {
                                              ...txn,
                                              status: 'reconciled' as const,
                                              jobId: inlineExpenseForm.job === 'none' ? '' : inlineExpenseForm.job,
                                              memo: inlineExpenseForm.memo,
                                              receipt: inlineExpenseForm.receipt
                                            };
                                            
                                            setTransactions(prev => 
                                              prev.map(t => t.id === txn.id ? updatedTxn : t)
                                            );
                                            
                                            setInlineEditingExpense(null);
                                            setInlineExpenseForm({
                                              property: '',
                                              job: '',
                                              billable: true,
                                              memo: '',
                                              receipt: ''
                                            });
                                          }
                                        }}
                                      >
                                        <CheckCircle className="h-4 w-4" />
                                      </Button>
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        className="border-gray-600 text-gray-300 hover:bg-gray-700"
                                        onClick={() => {
                                          setInlineEditingExpense(null);
                                          setInlineExpenseForm({
                                            property: '',
                                            job: '',
                                            billable: true,
                                            memo: '',
                                            receipt: ''
                                          });
                                        }}
                                      >
                                        <XCircle className="h-4 w-4" />
                                      </Button>
                                  </div>
                                  ) : (
                                    <Button
                                      size="sm"
                                      className="bg-blue-600 hover:bg-blue-700 text-white"
                                      onClick={() => {
                                        setInlineEditingExpense(txn.id);
                                        setInlineExpenseForm({
                                          property: property ? property.name : '',
                                          job: job ? job.id : '',
                                          billable: txn.billable,
                                          memo: txn.memo || '',
                                          receipt: ''
                                        });
                                      }}
                                    >
                                      <Pencil className="h-4 w-4" />
                                    </Button>
                                  )}
                                </td>
                              </tr>
                            );
                          })}
                      </tbody>
                    </table>
                  </div>
                </div>
              </>
            )}
            {activeTab === "transactions" && (
              <>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-white">Transactions</h3>
                  <div className="flex gap-2">
                    {role === 'centralOffice' && (
                      <Button 
                        variant="outline" 
                        className="bg-blue-600 border-blue-600 text-white hover:bg-blue-700 hover:border-blue-700 flex items-center gap-2"
                        onClick={() => setNewTransactionDialogOpen(true)}
                      >
                        <Plus className="h-4 w-4" /> Add Transaction
                      </Button>
                    )}
                    <Button className="bg-blue-600 hover:bg-blue-700 text-white flex items-center gap-2" onClick={exportTransactionsToCSV}>
                      <DownloadCloud className="h-4 w-4" /> Export to CSV
                    </Button>
                  </div>
                </div>

                {/* Need Review Table - Central Office Only */}
                {role === 'centralOffice' && getTransactionsNeedingReview().length > 0 && (
                  <div className="mb-8">
                    <div 
                      className="flex items-center justify-between p-4 bg-red-900/20 border border-red-700 rounded-lg cursor-pointer hover:bg-red-900/30 transition-colors"
                      onClick={() => setReviewTableExpanded(!reviewTableExpanded)}
                    >
                      <h4 className="text-md font-semibold text-red-400 flex items-center gap-2">
                        <AlertTriangle className="h-4 w-4" />
                        Transactions Needing Review ({getTransactionsNeedingReview().length})
                      </h4>
                      <ChevronDown 
                        className={`h-5 w-5 text-red-400 transition-transform ${reviewTableExpanded ? 'rotate-180' : ''}`} 
                      />
                    </div>
                    
                    {reviewTableExpanded && (
                      <div className="mt-4 flex flex-col h-[300px] rounded-lg">
                        <div className="flex-1 overflow-x-auto overflow-y-auto">
                          <table className="min-w-full text-sm">
                            <thead className="sticky top-0 z-10">
                              <tr className="bg-red-900/30 border-b border-red-700">
                                <th className="text-left py-3 px-4 font-semibold text-white flex items-center gap-2">
                                  <AlertTriangle className="h-4 w-4 text-red-400" />
                                  Date
                                </th>
                                <th className="text-left py-3 px-4 font-semibold text-white">Merchant</th>
                                <th className="text-left py-3 px-4 font-semibold text-white">Amount</th>
                                <th className="text-left py-3 px-4 font-semibold text-white">Made By</th>
                                <th className="text-left py-3 px-4 font-semibold text-white">Property</th>
                                <th className="text-left py-3 px-4 font-semibold text-white">Work Order</th>
                                <th className="text-left py-3 px-4 font-semibold text-white">Billable</th>
                                <th className="text-left py-3 px-4 font-semibold text-white">Status</th>
                                <th className="text-left py-3 px-4 font-semibold text-white">AI Flag</th>
                              </tr>
                            </thead>
                            <tbody>
                              {getTransactionsNeedingReview().map((txn, idx) => {
                                const job = jobs.find(j => j.id === txn.jobId);
                                const property = job ? properties.find(p => p.name === job.property) : undefined;
                                const aiFlag = transactionReviewFlags[txn.id] || 
                                  (!txn.receipt ? 'Missing receipt' : 
                                   !txn.memo ? 'Missing memo' : 
                                   !txn.jobId ? 'Missing job assignment' : 
                                   txn.amount > 1000 ? 'Unusual amount' : 'Review needed');
                                
                                return (
                                  <tr key={txn.id} className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                                    <td className="py-3 px-4 text-gray-300">{txn.date}</td>
                                    <td className="py-3 px-4 text-gray-300">{txn.vendor}</td>
                                    <td className="py-3 px-4 text-gray-300">${txn.amount.toFixed(2)}</td>
                                    <td className="py-3 px-4 text-gray-300">{txn.madeBy}</td>
                                    <td className="py-3 px-4 text-gray-300">{property ? property.name : 'Not Assigned'}</td>
                                    <td className="py-3 px-4 text-gray-300">{job ? job.description : 'Not Assigned'}</td>
                                    <td className="py-3 px-4">
                                      <span className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold ${
                                        txn.billable ? 'bg-green-700 text-green-100' : 'bg-gray-700 text-gray-200'
                                      }`}>
                                        {txn.billable ? 'Yes' : 'No'}
                                      </span>
                                    </td>
                                    <td className="py-3 px-4">
                                      {txn.billable ? (
                                        <span className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold ${
                                          txn.status === 'reconciled' ? 'bg-blue-700 text-blue-100' : 'bg-red-700 text-red-100'
                                        }`}>
                                          {txn.status === 'reconciled' ? 'Reimbursed' : 'Pending'}
                                        </span>
                                      ) : (
                                        <span className="inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold bg-gray-700 text-gray-300">
                                          Non-Reimbursable
                                        </span>
                                      )}
                                    </td>
                                    <td className="py-3 px-4">
                                      <span className="inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold bg-red-700 text-red-100">
                                        {aiFlag}
                                      </span>
                                    </td>
                                  </tr>
                                );
                              })}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {/* Filters */}
                <div className="flex flex-wrap gap-4 mb-4 items-end">
                  <div>
                    <Label className="text-gray-300">Status</Label>
                    <Select value={txnFilterStatus} onValueChange={setTxnFilterStatus}>
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-32">
                        <SelectValue>{txnFilterStatus === 'all' ? 'All' : txnFilterStatus.charAt(0).toUpperCase() + txnFilterStatus.slice(1)}</SelectValue>
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="all">All</SelectItem>
                        <SelectItem value="reconciled">Reconciled</SelectItem>
                        <SelectItem value="pending">Pending</SelectItem>
                      </SelectContent>
                    </Select>
        </div>
                <div>
                    <Label className="text-gray-300">Billable</Label>
                    <Select value={txnFilterBillable} onValueChange={setTxnFilterBillable}>
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-32">
                        <SelectValue>{txnFilterBillable === 'all' ? 'All' : txnFilterBillable === 'billable' ? 'Billable' : 'Non-Billable'}</SelectValue>
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="all">All</SelectItem>
                        <SelectItem value="billable">Billable</SelectItem>
                        <SelectItem value="nonbillable">Non-Billable</SelectItem>
                      </SelectContent>
                    </Select>
                </div>
                <div>
                    <Label className="text-gray-300">Property</Label>
                    <Select value={txnFilterProperty} onValueChange={setTxnFilterProperty}>
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-40">
                        <SelectValue>{txnFilterProperty === 'all' ? 'All' : (properties.find(p => p.id === txnFilterProperty)?.name || '')}</SelectValue>
                    </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="all">All</SelectItem>
                        {properties.map(property => (
                          <SelectItem key={property.id} value={property.id}>{property.name}</SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                </div>
                  <div>
                    <Label className="text-gray-300">Work Order</Label>
                    <Select value={txnFilterJob} onValueChange={setTxnFilterJob}>
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-40">
                        <SelectValue>{txnFilterJob === 'all' ? 'All' : (jobs.find(j => j.id === txnFilterJob)?.description || '')}</SelectValue>
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="all">All</SelectItem>
                        {jobs.map(job => (
                          <SelectItem key={job.id} value={job.id}>{job.description}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
              </div>
                    <div>
                    <Label className="text-gray-300">Made By</Label>
                    <Select value={txnFilterMadeBy} onValueChange={setTxnFilterMadeBy}>
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-40">
                        <SelectValue>{txnFilterMadeBy === 'all' ? 'All' : txnFilterMadeBy}</SelectValue>
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="all">All</SelectItem>
                        {Array.from(new Set([...transactions, ...technicianTransactions].map(txn => txn.madeBy))).map(madeBy => (
                          <SelectItem key={madeBy} value={madeBy}>{madeBy}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    </div>
                  <div>
                    <Label className="text-gray-300">Date From</Label>
                    <Input type="date" className="bg-gray-800 border-gray-600 text-white w-36" value={txnFilterDateFrom} onChange={e => setTxnFilterDateFrom(e.target.value)} />
                  </div>
                    <div>
                    <Label className="text-gray-300">Date To</Label>
                    <Input type="date" className="bg-gray-800 border-gray-600 text-white w-36" value={txnFilterDateTo} onChange={e => setTxnFilterDateTo(e.target.value)} />
                    </div>
                  </div>
                <div className="flex flex-col h-[400px] rounded-lg">
                  <div className="flex-1 overflow-x-auto overflow-y-auto">
                    <table className="min-w-full text-sm">
                      <thead className="sticky top-0 z-10">
                        <tr className="bg-gray-900 border-b border-gray-700">
                          <th className="text-left py-3 px-4 font-semibold text-white">Date</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Merchant</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Amount</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Made By</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Property</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Work Order</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Billable</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Status</th>
                          <th className="text-left py-3 px-4 font-semibold text-white">Details</th>
                        </tr>
                      </thead>
                      <tbody>
                        {filteredTransactions.map((txn, idx) => {
                          const assignment = txnAssignments[txn.id] || {};
                          const memo = txnMemos[txn.id] || '';
                          const receipt = txnReceipts[txn.id] || null;
                          const job = jobs.find(j => j.id === txn.jobId);
                          const property = job ? properties.find(p => p.name === job.property) : undefined;
                          return (
                            <tr key={txn.id} className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                              <td className="py-3 px-4 text-gray-300">{txn.date}</td>
                              <td className="py-3 px-4 text-gray-300">{txn.vendor}</td>
                              <td className="py-3 px-4 text-gray-300">${txn.amount.toFixed(2)}</td>
                              <td className="py-3 px-4 text-gray-300">{txn.madeBy}</td>
                              <td className="py-3 px-4 text-gray-300">{assignment.property || (property ? property.name : 'Not Assigned')}</td>
                              <td className="py-3 px-4 text-gray-300">{assignment.job ? (jobs.find(j => j.id === assignment.job)?.description || assignment.job) : (job ? job.description : 'Not Assigned')}</td>
                              <td className="py-3 px-4">
                                <span className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold ${
                                  txn.billable ? 'bg-green-700 text-green-100' : 'bg-gray-700 text-gray-200'
                                }`}>
                                  {txn.billable ? 'Yes' : 'No'}
                                </span>
                              </td>
                              <td className="py-3 px-4">
                                {txn.billable ? (
                                  <span className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold ${
                                    txn.status === 'reconciled' ? 'bg-blue-700 text-blue-100' : 'bg-red-700 text-red-100'
                                  }`}>
                                    {txn.status === 'reconciled' ? 'Reimbursed' : 'Pending'}
                                  </span>
                                ) : (
                                  <span className="inline-flex items-center px-2 py-1 rounded-md text-xs font-semibold bg-gray-700 text-gray-300">
                                    Non-Reimbursable
                                  </span>
                                )}
                              </td>
                              <td className="py-3 px-4">
                                <div className="flex gap-1">
                                  <Button
                                    size="icon"
                                    variant="ghost"
                                    className="h-8 w-8 text-gray-300 hover:text-white hover:bg-blue-500/20"
                                    onClick={() => {
                                      setSelectedTransaction(txn as Transaction);
                                      setTransactionDetailsOpen(true);
                                    }}
                                  >
                                    <Eye className="h-4 w-4" />
                                  </Button>
                                  {role === 'centralOffice' && (
                                    <Button
                                      size="icon"
                                      variant="ghost"
                                      className="h-8 w-8 text-gray-300 hover:text-white hover:bg-green-500/20"
                                      onClick={() => handleEditTransaction(txn as Transaction)}
                                    >
                                      <Edit className="h-4 w-4" />
                                    </Button>
                                  )}
                                </div>
                              </td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                    </div>
                  </div>
              </>
            )}
            {activeTab === "properties" && (
              <>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-white">Properties</h3>
                </div>
                <div className="overflow-x-auto">
                  <table className="min-w-full text-sm">
                    <thead>
                      <tr className="bg-gray-900 border-b border-gray-700">
                        <th className="text-left py-3 px-4 font-semibold text-white">Property</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Address</th>
                      </tr>
                    </thead>
                    <tbody>
                      {properties.map((property) => (
                        <React.Fragment key={property.id}>
                          <tr 
                            className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors cursor-pointer"
                            onClick={() => setExpandedPropertyEmployees(expandedPropertyEmployees === property.id ? null : property.id)}
                          >
                            <td className="py-3 px-4">
                              <div className="font-medium text-white">{property.name}</div>
                            </td>
                            <td className="py-3 px-4 text-gray-300">{property.address}</td>
                          </tr>
                          {expandedPropertyEmployees === property.id && (
                            <tr className="bg-gray-900">
                              <td colSpan={2} className="p-0">
                                <div className="p-4">
                                  <h5 className="text-sm font-semibold text-white mb-3">Staff at {property.name}</h5>
                                  <table className="min-w-full text-sm">
                                    <thead>
                                      <tr className="bg-gray-800 border-b border-gray-700">
                                        <th className="text-left py-2 px-3 font-semibold text-white">Name</th>
                                        <th className="text-left py-2 px-3 font-semibold text-white">Role</th>
                                        <th className="text-left py-2 px-3 font-semibold text-white">Phone</th>
                                        <th className="text-left py-2 px-3 font-semibold text-white">Email</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      {property.staff.map((employee, index) => (
                                        <tr key={index} className="bg-gray-900 border-b border-gray-800 hover:bg-gray-800/50 transition-colors">
                                          <td className="py-2 px-3 text-gray-300">{employee.name}</td>
                                          <td className="py-2 px-3 text-gray-300">{employee.role}</td>
                                          <td className="py-2 px-3 text-gray-300">{employee.phone}</td>
                                          <td className="py-2 px-3 text-gray-300">{employee.email}</td>
                                        </tr>
                                      ))}
                                    </tbody>
                                  </table>
              </div>
                              </td>
                            </tr>
                          )}
                        </React.Fragment>
                      ))}
                    </tbody>
                  </table>
                    </div>
              </>
            )}
            {activeTab === "staff" && (
              <>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-white">Technicians</h3>
                </div>
                <div className="overflow-x-auto">
                  <table className="min-w-full text-sm">
                    <thead>
                      <tr className="bg-gray-900 border-b border-gray-700">
                        <th className="text-left py-3 px-4 font-semibold text-white">Name</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Phone</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Email</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Work Orders Assigned</th>
                      </tr>
                    </thead>
                    <tbody>
                      {staff.map((technician) => {
                        const assignedJobs = jobs.filter(job => job.technician === technician.name);
                        return (
                          <React.Fragment key={technician.id}>
                            <tr className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                              <td className="py-3 px-4">
                                <div className="font-medium text-white">{technician.name}</div>
                              </td>
                              <td className="py-3 px-4 text-gray-300">{technician.phone}</td>
                              <td className="py-3 px-4 text-gray-300">{technician.email}</td>
                              <td className="py-3 px-4 text-gray-300">
                                <button
                                  className={`text-left hover:text-blue-400 transition-colors ${
                                    assignedJobs.length > 0 ? 'text-blue-400 cursor-pointer' : 'text-gray-500 cursor-default'
                                  }`}
                                  onClick={() => assignedJobs.length > 0 && setViewTechnicianWorkOrders(viewTechnicianWorkOrders === technician.id ? null : technician.id)}
                                  disabled={assignedJobs.length === 0}
                                >
                                  {assignedJobs.length} work order{assignedJobs.length !== 1 ? 's' : ''}
                                </button>
                              </td>
                            </tr>
                            {viewTechnicianWorkOrders === technician.id && assignedJobs.length > 0 && (
                              <tr className="bg-gray-900">
                                <td colSpan={4} className="p-0">
                                  <div className="p-4">
                                    <h5 className="text-sm font-semibold text-white mb-3">Work Orders for {technician.name}</h5>
                                    <table className="min-w-full text-sm">
                                      <thead>
                                        <tr className="bg-gray-800 border-b border-gray-700">
                                          <th className="text-left py-2 px-3 font-semibold text-white">Property</th>
                                          <th className="text-left py-2 px-3 font-semibold text-white">Description</th>
                                          <th className="text-left py-2 px-3 font-semibold text-white">Status</th>
                                          <th className="text-left py-2 px-3 font-semibold text-white">Priority</th>
                                        </tr>
                                      </thead>
                                      <tbody>
                                        {assignedJobs.map((job) => (
                                          <tr key={job.id} className="bg-gray-900 border-b border-gray-800 hover:bg-gray-800/50 transition-colors">
                                            <td className="py-2 px-3 text-gray-300">{job.property}</td>
                                            <td className="py-2 px-3 text-gray-300">{job.description}</td>
                                            <td className="py-2 px-3 text-gray-300">{job.techStatus}</td>
                                            <td className="py-2 px-3 text-gray-300">{job.priority}</td>
                                          </tr>
                                        ))}
                                      </tbody>
                                    </table>
            </div>
                                </td>
                              </tr>
                            )}
                          </React.Fragment>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              </>
            )}
            {activeTab === "profile" && (
              <>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-white">My Profile</h3>
                </div>
                
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Personal Information Card */}
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <User className="h-5 w-5" />
                        Personal Information
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex items-center space-x-4">
                        <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center">
                          <User className="h-8 w-8 text-white" />
                        </div>
                        <div>
                          <h4 className="text-lg font-semibold text-white">{technicianName}</h4>
                          <p className="text-gray-400">HVAC Technician</p>
                        </div>
                      </div>
                      
                      <div className="space-y-3">
                        <div className="flex justify-between items-center">
                          <Label className="text-gray-400">Employee ID</Label>
                          <span className="text-white">TECH-001</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <Label className="text-gray-400">Email</Label>
                          <span className="text-white">alice.johnson@company.com</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <Label className="text-gray-400">Phone</Label>
                          <span className="text-white">(555) 123-4567</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <Label className="text-gray-400">Hire Date</Label>
                          <span className="text-white">March 15, 2023</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <Label className="text-gray-400">Status</Label>
                          <Badge className="bg-green-600 text-white">Active</Badge>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Work Statistics Card */}
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <BarChart3 className="h-5 w-5" />
                        Work Statistics
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div className="text-center p-3 bg-gray-700 rounded-lg">
                          <div className="text-2xl font-bold text-blue-400">{technicianWorkOrders.length}</div>
                          <div className="text-sm text-gray-400">Total Work Orders</div>
                        </div>
                        <div className="text-center p-3 bg-gray-700 rounded-lg">
                          <div className="text-2xl font-bold text-green-400">{technicianFinishedJobs.length}</div>
                          <div className="text-sm text-gray-400">Completed</div>
                        </div>
                        <div className="text-center p-3 bg-gray-700 rounded-lg">
                          <div className="text-2xl font-bold text-yellow-400">{technicianInProgressJobs.length}</div>
                          <div className="text-sm text-gray-400">In Progress</div>
                        </div>
                        <div className="text-center p-3 bg-gray-700 rounded-lg">
                          <div className="text-2xl font-bold text-red-400">{technicianOverdueJobs.length}</div>
                          <div className="text-sm text-gray-400">Overdue</div>
                        </div>
                      </div>
                      
                      <div className="pt-4 border-t border-gray-700">
                        <h5 className="text-sm font-semibold text-white mb-2">This Month's Expenses</h5>
                        <div className="space-y-2">
                          <div className="flex justify-between items-center">
                            <span className="text-gray-400">Total Spent</span>
                            <span className="text-white">${technicianTotalSpend.toFixed(2)}</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-gray-400">Billable</span>
                            <span className="text-green-400">${technicianBillableSpend.toFixed(2)}</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-gray-400">Non-Billable</span>
                            <span className="text-yellow-400">${technicianNonBillableSpend.toFixed(2)}</span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Skills & Certifications Card */}
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Award className="h-5 w-5" />
                        Skills & Certifications
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="space-y-3">
                        <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                          <div>
                            <div className="font-medium text-white">HVAC Installation</div>
                            <div className="text-sm text-gray-400">Certified Technician</div>
                          </div>
                          <Badge className="bg-green-600 text-white">Active</Badge>
                        </div>
                        <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                          <div>
                            <div className="font-medium text-white">Refrigeration Systems</div>
                            <div className="text-sm text-gray-400">EPA Certified</div>
                          </div>
                          <Badge className="bg-green-600 text-white">Active</Badge>
                        </div>
                        <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                          <div>
                            <div className="font-medium text-white">Electrical Systems</div>
                            <div className="text-sm text-gray-400">Licensed Electrician</div>
                          </div>
                          <Badge className="bg-green-600 text-white">Active</Badge>
                        </div>
                        <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                          <div>
                            <div className="font-medium text-white">Plumbing</div>
                            <div className="text-sm text-gray-400">Basic Certification</div>
                          </div>
                          <Badge className="bg-yellow-600 text-white">Pending</Badge>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Recent Activity Card */}
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Clock className="h-5 w-5" />
                        Recent Activity
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="space-y-3">
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-green-400 rounded-full mt-2"></div>
                          <div className="flex-1">
                            <p className="text-sm text-white">Completed HVAC maintenance at Stanford GSB</p>
                            <p className="text-xs text-gray-400">2 hours ago</p>
                          </div>
                        </div>
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-blue-400 rounded-full mt-2"></div>
                          <div className="flex-1">
                            <p className="text-sm text-white">Started work order at Sunnyvale 432</p>
                            <p className="text-xs text-gray-400">1 day ago</p>
                          </div>
                        </div>
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-yellow-400 rounded-full mt-2"></div>
                          <div className="flex-1">
                            <p className="text-sm text-white">Submitted expense report for $150.00</p>
                            <p className="text-xs text-gray-400">2 days ago</p>
                          </div>
                        </div>
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-purple-400 rounded-full mt-2"></div>
                          <div className="flex-1">
                            <p className="text-sm text-white">Received new work order assignment</p>
                            <p className="text-xs text-gray-400">3 days ago</p>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </>
            )}
            {activeTab === "policy" && (
              <>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-white">AI Expense Policy</h3>
                  <div className="flex gap-2">
                    <Button 
                      variant="outline" 
                      className="bg-blue-600 border-blue-600 text-white hover:bg-blue-700 hover:border-blue-700 flex items-center gap-2"
                      onClick={() => setPolicyEditMode(!policyEditMode)}
                    >
                      <Edit className="h-4 w-4" /> {policyEditMode ? 'Save Policy' : 'Edit Policy'}
                    </Button>
                    <Button 
                      variant="outline" 
                      className="bg-green-600 border-green-600 text-white hover:bg-green-700 hover:border-green-700 flex items-center gap-2"
                      onClick={() => setNewQuestionDialogOpen(true)}
                    >
                      <Plus className="h-4 w-4" /> Add Question
                    </Button>
                  </div>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* AI Policy Content */}
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <BookOpen className="h-5 w-5" />
                        AI Policy Guidelines
                      </CardTitle>
                      <CardDescription className="text-gray-400">
                        Centralized expense policy for AI-assisted decision making
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      {policyEditMode ? (
                        <Textarea
                          value={aiPolicyContent}
                          onChange={(e) => setAiPolicyContent(e.target.value)}
                          className="min-h-[400px] bg-gray-900 border-gray-600 text-white"
                          placeholder="Enter your AI expense policy guidelines..."
                        />
                      ) : (
                        <div className="prose prose-invert max-w-none">
                          <div className="whitespace-pre-wrap text-gray-300 leading-relaxed">
                            {aiPolicyContent}
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>

                  {/* Expense Questions Tracker */}
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <CheckCircle className="h-5 w-5" />
                        Expense Decision Tracker
                      </CardTitle>
                      <CardDescription className="text-gray-400">
                        Quick decision matrix for expense approvals
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        {expenseQuestions.map((question) => (
                          <div key={question.id} className="p-4 bg-gray-900 rounded-lg border border-gray-700">
                            <div className="flex items-start justify-between mb-3">
                              <div className="flex-1">
                                <p className="text-sm font-medium text-white mb-1">{question.question}</p>
                                <span className="inline-block px-2 py-1 text-xs bg-blue-600 text-blue-100 rounded">
                                  {question.category}
                                </span>
                              </div>
                            </div>
                            <div className="flex gap-2">
                              <Button
                                size="sm"
                                variant={question.answer === 'yes' ? 'default' : 'outline'}
                                className={question.answer === 'yes' ? 'bg-green-600 hover:bg-green-700' : 'border-green-600 text-green-400 hover:bg-green-600/20'}
                                onClick={() => setExpenseQuestions(prev => 
                                  prev.map(q => q.id === question.id ? { ...q, answer: 'yes' as const } : q)
                                )}
                              >
                                Yes
                              </Button>
                              <Button
                                size="sm"
                                variant={question.answer === 'no' ? 'default' : 'outline'}
                                className={question.answer === 'no' ? 'bg-red-600 hover:bg-red-700' : 'border-red-600 text-red-400 hover:bg-red-600/20'}
                                onClick={() => setExpenseQuestions(prev => 
                                  prev.map(q => q.id === question.id ? { ...q, answer: 'no' as const } : q)
                                )}
                              >
                                No
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                className="border-gray-600 text-gray-400 hover:bg-gray-700"
                                onClick={() => setExpenseQuestions(prev => 
                                  prev.map(q => q.id === question.id ? { ...q, answer: null } : q)
                                )}
                              >
                                Clear
                              </Button>
                            </div>
                          </div>
                        ))}
                      </div>
                      
                      {/* Summary */}
                      <div className="mt-6 p-4 bg-gray-900 rounded-lg border border-gray-700">
                        <h4 className="text-sm font-semibold text-white mb-3">Decision Summary</h4>
                        <div className="grid grid-cols-3 gap-4 text-center">
                          <div>
                            <div className="text-2xl font-bold text-green-400">
                              {expenseQuestions.filter(q => q.answer === 'yes').length}
                            </div>
                            <div className="text-xs text-gray-400">Yes</div>
                          </div>
                          <div>
                            <div className="text-2xl font-bold text-red-400">
                              {expenseQuestions.filter(q => q.answer === 'no').length}
                            </div>
                            <div className="text-xs text-gray-400">No</div>
                          </div>
                          <div>
                            <div className="text-2xl font-bold text-gray-400">
                              {expenseQuestions.filter(q => q.answer === null).length}
                            </div>
                            <div className="text-xs text-gray-400">Pending</div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Quick Actions */}
                <div className="mt-6">
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Zap className="h-5 w-5" />
                        Quick Actions
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <Button 
                          variant="outline" 
                          className="bg-blue-600 border-blue-600 text-white hover:bg-blue-700 hover:border-blue-700"
                          onClick={() => setExpenseQuestions(prev => prev.map(q => ({ ...q, answer: null })))}
                        >
                          Clear All Answers
                        </Button>
                        <Button 
                          variant="outline" 
                          className="bg-green-600 border-green-600 text-white hover:bg-green-700 hover:border-green-700"
                          onClick={() => {
                            const yesCount = expenseQuestions.filter(q => q.answer === 'yes').length;
                            const noCount = expenseQuestions.filter(q => q.answer === 'no').length;
                            const pendingCount = expenseQuestions.filter(q => q.answer === null).length;
                            alert(`Decision Summary:\nYes: ${yesCount}\nNo: ${noCount}\nPending: ${pendingCount}`);
                          }}
                        >
                          Export Summary
                        </Button>
                        <Button 
                          variant="outline" 
                          className="bg-purple-600 border-purple-600 text-white hover:bg-purple-700 hover:border-purple-700"
                          onClick={() => {
                            const allAnswered = expenseQuestions.every(q => q.answer !== null);
                            if (allAnswered) {
                              const yesCount = expenseQuestions.filter(q => q.answer === 'yes').length;
                              const approvalRate = (yesCount / expenseQuestions.length * 100).toFixed(1);
                              alert(`Expense Approval Rate: ${approvalRate}%`);
                            } else {
                              alert('Please answer all questions first');
                            }
                          }}
                        >
                          Calculate Approval Rate
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Help Requests from Technicians */}
                <div className="mt-6">
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <MessageSquare className="h-5 w-5" />
                        Help Requests from Technicians
                        {helpRequests.filter(r => r.status === 'pending').length > 0 && (
                          <Badge className="bg-orange-600 text-white ml-2">
                            {helpRequests.filter(r => r.status === 'pending').length} Pending
                          </Badge>
                        )}
                      </CardTitle>
                      <CardDescription className="text-gray-400">
                        Questions and requests for guidance from technicians
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      {helpRequests.length === 0 ? (
                        <div className="text-center py-8 text-gray-400">
                          <MessageSquare className="h-12 w-12 mx-auto mb-4 opacity-50" />
                          <p>No help requests yet</p>
                          <p className="text-sm">Technicians can submit questions using the "Ask for Help" button in their My Expenses tab</p>
                        </div>
                      ) : (
                        <div className="space-y-4">
                          {helpRequests.map((request) => (
                            <div key={request.id} className="p-4 bg-gray-900 rounded-lg border border-gray-700">
                              <div className="flex items-start justify-between mb-3">
                                <div className="flex-1">
                                  <div className="flex items-center gap-2 mb-2">
                                    <span className="text-sm font-medium text-white">{request.technicianName}</span>
                                    <Badge 
                                      className={`${
                                        request.urgency === 'high' ? 'bg-red-600' : 
                                        request.urgency === 'normal' ? 'bg-orange-600' : 'bg-blue-600'
                                      } text-white`}
                                    >
                                      {request.urgency}
                                    </Badge>
                                    <Badge 
                                      className={`${
                                        request.status === 'pending' ? 'bg-yellow-600' : 
                                        request.status === 'answered' ? 'bg-green-600' : 'bg-gray-600'
                                      } text-white`}
                                    >
                                      {request.status}
                                    </Badge>
                                  </div>
                                  <p className="text-sm text-gray-300 mb-2">{request.question}</p>
                                  {request.additionalDetails && (
                                    <p className="text-xs text-gray-400 mb-2">{request.additionalDetails}</p>
                                  )}
                                  {request.expenseId && (
                                    <div className="text-xs text-gray-400 mb-2">
                                      Related Expense: {request.expenseId}
                                    </div>
                                  )}
                                  <div className="text-xs text-gray-500">
                                    Submitted: {new Date(request.createdAt).toLocaleString()}
                                  </div>
                                </div>
                              </div>
                              
                              {request.status === 'pending' && (
                                <div className="mt-4 space-y-3">
                                  <Button
                                    size="sm"
                                    className="bg-green-600 hover:bg-green-700 text-white"
                                    onClick={() => {
                                      setSelectedHelpRequest(request);
                                      setResponseForm({
                                        answer: '',
                                        decisionTrackerAnswers: {
                                          'Is this expense reasonable and necessary?': null,
                                          'Should this be billable to the property/owner?': null,
                                          'Is a receipt required?': null,
                                          'Does this require pre-approval?': null,
                                          'Is this an emergency repair?': null,
                                          'Is this a capital improvement?': null,
                                          'Should this be reimbursed?': null,
                                          'Is this within budget limits?': null
                                        }
                                      });
                                      setResponseDialogOpen(true);
                                    }}
                                  >
                                    Respond with Decision Tracker
                                  </Button>
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    className="border-gray-600 text-gray-300"
                                    onClick={() => {
                                      setHelpRequests(prev => 
                                        prev.map(r => r.id === request.id ? { 
                                          ...r, 
                                          status: 'resolved' as const,
                                          answeredAt: new Date().toISOString()
                                        } : r)
                                      );
                                    }}
                                  >
                                    Mark Resolved
                                  </Button>
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              </>
            )}
            {activeTab === "properties" && (
              <>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-white">Properties</h3>
                </div>
                <div className="overflow-x-auto">
                  <table className="min-w-full text-sm">
                    <thead>
                      <tr className="bg-gray-900 border-b border-gray-700">
                        <th className="text-left py-3 px-4 font-semibold text-white">Property</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Address</th>
                      </tr>
                    </thead>
                    <tbody>
                      {properties.map((property) => (
                        <React.Fragment key={property.id}>
                          <tr 
                            className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors cursor-pointer"
                            onClick={() => setExpandedPropertyEmployees(expandedPropertyEmployees === property.id ? null : property.id)}
                          >
                            <td className="py-3 px-4">
                              <div className="font-medium text-white">{property.name}</div>
                            </td>
                            <td className="py-3 px-4 text-gray-300">{property.address}</td>
                          </tr>
                          {expandedPropertyEmployees === property.id && (
                            <tr className="bg-gray-900">
                              <td colSpan={2} className="p-0">
                                <div className="p-4">
                                  <h5 className="text-sm font-semibold text-white mb-3">Staff at {property.name}</h5>
                                  <table className="min-w-full text-sm">
                                    <thead>
                                      <tr className="bg-gray-800 border-b border-gray-700">
                                        <th className="text-left py-2 px-3 font-semibold text-white">Name</th>
                                        <th className="text-left py-2 px-3 font-semibold text-white">Role</th>
                                        <th className="text-left py-2 px-3 font-semibold text-white">Phone</th>
                                        <th className="text-left py-2 px-3 font-semibold text-white">Email</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      {property.staff.map((employee, index) => (
                                        <tr key={index} className="bg-gray-900 border-b border-gray-800 hover:bg-gray-800/50 transition-colors">
                                          <td className="py-2 px-3 text-gray-300">{employee.name}</td>
                                          <td className="py-2 px-3 text-gray-300">{employee.role}</td>
                                          <td className="py-2 px-3 text-gray-300">{employee.phone}</td>
                                          <td className="py-2 px-3 text-gray-300">{employee.email}</td>
                                        </tr>
                                      ))}
                                    </tbody>
                                  </table>
              </div>
                              </td>
                            </tr>
                          )}
                        </React.Fragment>
                      ))}
                    </tbody>
                  </table>
                    </div>
              </>
            )}
            {activeTab === "staff" && (
              <>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-white">Technicians</h3>
                </div>
                <div className="overflow-x-auto">
                  <table className="min-w-full text-sm">
                    <thead>
                      <tr className="bg-gray-900 border-b border-gray-700">
                        <th className="text-left py-3 px-4 font-semibold text-white">Name</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Phone</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Email</th>
                        <th className="text-left py-3 px-4 font-semibold text-white">Work Orders Assigned</th>
                      </tr>
                    </thead>
                    <tbody>
                      {staff.map((technician) => {
                        const assignedJobs = jobs.filter(job => job.technician === technician.name);
                        return (
                          <React.Fragment key={technician.id}>
                            <tr className="bg-gray-800 border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                              <td className="py-3 px-4">
                                <div className="font-medium text-white">{technician.name}</div>
                              </td>
                              <td className="py-3 px-4 text-gray-300">{technician.phone}</td>
                              <td className="py-3 px-4 text-gray-300">{technician.email}</td>
                              <td className="py-3 px-4 text-gray-300">
                                <button
                                  className={`text-left hover:text-blue-400 transition-colors ${
                                    assignedJobs.length > 0 ? 'text-blue-400 cursor-pointer' : 'text-gray-500 cursor-default'
                                  }`}
                                  onClick={() => assignedJobs.length > 0 && setViewTechnicianWorkOrders(viewTechnicianWorkOrders === technician.id ? null : technician.id)}
                                  disabled={assignedJobs.length === 0}
                                >
                                  {assignedJobs.length} work order{assignedJobs.length !== 1 ? 's' : ''}
                                </button>
                              </td>
                            </tr>
                            {viewTechnicianWorkOrders === technician.id && assignedJobs.length > 0 && (
                              <tr className="bg-gray-900">
                                <td colSpan={4} className="p-0">
                                  <div className="p-4">
                                    <h5 className="text-sm font-semibold text-white mb-3">Work Orders for {technician.name}</h5>
                                    <table className="min-w-full text-sm">
                                      <thead>
                                        <tr className="bg-gray-800 border-b border-gray-700">
                                          <th className="text-left py-2 px-3 font-semibold text-white">Property</th>
                                          <th className="text-left py-2 px-3 font-semibold text-white">Description</th>
                                          <th className="text-left py-2 px-3 font-semibold text-white">Status</th>
                                          <th className="text-left py-2 px-3 font-semibold text-white">Priority</th>
                                        </tr>
                                      </thead>
                                      <tbody>
                                        {assignedJobs.map((job) => (
                                          <tr key={job.id} className="bg-gray-900 border-b border-gray-800 hover:bg-gray-800/50 transition-colors">
                                            <td className="py-2 px-3 text-gray-300">{job.property}</td>
                                            <td className="py-2 px-3 text-gray-300">{job.description}</td>
                                            <td className="py-2 px-3 text-gray-300">{job.techStatus}</td>
                                            <td className="py-2 px-3 text-gray-300">{job.priority}</td>
                                          </tr>
                                        ))}
                                      </tbody>
                                    </table>
            </div>
                                </td>
                              </tr>
                            )}
                          </React.Fragment>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              </>
            )}
            {activeTab === "profile" && (
              <>
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-lg font-semibold text-white">My Profile</h3>
                </div>
                
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Personal Information Card */}
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <User className="h-5 w-5" />
                        Personal Information
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex items-center space-x-4">
                        <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center">
                          <User className="h-8 w-8 text-white" />
                        </div>
                        <div>
                          <h4 className="text-lg font-semibold text-white">{technicianName}</h4>
                          <p className="text-gray-400">HVAC Technician</p>
                        </div>
                      </div>
                      
                      <div className="space-y-3">
                        <div className="flex justify-between items-center">
                          <Label className="text-gray-400">Employee ID</Label>
                          <span className="text-white">TECH-001</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <Label className="text-gray-400">Email</Label>
                          <span className="text-white">alice.johnson@company.com</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <Label className="text-gray-400">Phone</Label>
                          <span className="text-white">(555) 123-4567</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <Label className="text-gray-400">Hire Date</Label>
                          <span className="text-white">March 15, 2023</span>
                        </div>
                        <div className="flex justify-between items-center">
                          <Label className="text-gray-400">Status</Label>
                          <Badge className="bg-green-600 text-white">Active</Badge>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Work Statistics Card */}
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <BarChart3 className="h-5 w-5" />
                        Work Statistics
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div className="text-center p-3 bg-gray-700 rounded-lg">
                          <div className="text-2xl font-bold text-blue-400">{technicianWorkOrders.length}</div>
                          <div className="text-sm text-gray-400">Total Work Orders</div>
                        </div>
                        <div className="text-center p-3 bg-gray-700 rounded-lg">
                          <div className="text-2xl font-bold text-green-400">{technicianFinishedJobs.length}</div>
                          <div className="text-sm text-gray-400">Completed</div>
                        </div>
                        <div className="text-center p-3 bg-gray-700 rounded-lg">
                          <div className="text-2xl font-bold text-yellow-400">{technicianInProgressJobs.length}</div>
                          <div className="text-sm text-gray-400">In Progress</div>
                        </div>
                        <div className="text-center p-3 bg-gray-700 rounded-lg">
                          <div className="text-2xl font-bold text-red-400">{technicianOverdueJobs.length}</div>
                          <div className="text-sm text-gray-400">Overdue</div>
                        </div>
                      </div>
                      
                      <div className="pt-4 border-t border-gray-700">
                        <h5 className="text-sm font-semibold text-white mb-2">This Month's Expenses</h5>
                        <div className="space-y-2">
                          <div className="flex justify-between items-center">
                            <span className="text-gray-400">Total Spent</span>
                            <span className="text-white">${technicianTotalSpend.toFixed(2)}</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-gray-400">Billable</span>
                            <span className="text-green-400">${technicianBillableSpend.toFixed(2)}</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-gray-400">Non-Billable</span>
                            <span className="text-yellow-400">${technicianNonBillableSpend.toFixed(2)}</span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Skills & Certifications Card */}
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Award className="h-5 w-5" />
                        Skills & Certifications
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="space-y-3">
                        <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                          <div>
                            <div className="font-medium text-white">HVAC Installation</div>
                            <div className="text-sm text-gray-400">Certified Technician</div>
                          </div>
                          <Badge className="bg-green-600 text-white">Active</Badge>
                        </div>
                        <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                          <div>
                            <div className="font-medium text-white">Refrigeration Systems</div>
                            <div className="text-sm text-gray-400">EPA Certified</div>
                          </div>
                          <Badge className="bg-green-600 text-white">Active</Badge>
                        </div>
                        <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                          <div>
                            <div className="font-medium text-white">Electrical Systems</div>
                            <div className="text-sm text-gray-400">Licensed Electrician</div>
                          </div>
                          <Badge className="bg-green-600 text-white">Active</Badge>
                        </div>
                        <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                          <div>
                            <div className="font-medium text-white">Plumbing</div>
                            <div className="text-sm text-gray-400">Basic Certification</div>
                          </div>
                          <Badge className="bg-yellow-600 text-white">Pending</Badge>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Recent Activity Card */}
                  <Card className="bg-gray-800 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Clock className="h-5 w-5" />
                        Recent Activity
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="space-y-3">
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-green-400 rounded-full mt-2"></div>
                          <div className="flex-1">
                            <p className="text-sm text-white">Completed HVAC maintenance at Stanford GSB</p>
                            <p className="text-xs text-gray-400">2 hours ago</p>
                          </div>
                        </div>
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-blue-400 rounded-full mt-2"></div>
                          <div className="flex-1">
                            <p className="text-sm text-white">Started work order at Sunnyvale 432</p>
                            <p className="text-xs text-gray-400">1 day ago</p>
                          </div>
                        </div>
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-yellow-400 rounded-full mt-2"></div>
                          <div className="flex-1">
                            <p className="text-sm text-white">Submitted expense report for $150.00</p>
                            <p className="text-xs text-gray-400">2 days ago</p>
                          </div>
                        </div>
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-purple-400 rounded-full mt-2"></div>
                          <div className="flex-1">
                            <p className="text-sm text-white">Received new work order assignment</p>
                            <p className="text-xs text-gray-400">3 days ago</p>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </>
            )}
            {/* Floating Smart Assist Button */}
            <button
              className="fixed bottom-6 right-6 z-50 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-lg p-4 flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-blue-400"
              onClick={() => setSmartAssistOpen(true)}
              aria-label="Open Smart Assist Chat"
            >
              <Sparkles className="h-7 w-7" />
            </button>

            {/* Smart Assist Drawer */}
            <Sheet open={smartAssistOpen} onOpenChange={setSmartAssistOpen}>
              <SheetContent side="right" className="w-full max-w-md bg-gray-900 border-l border-gray-700 p-0 flex flex-col">
                <SheetHeader className="p-6 pb-2">
                  <SheetTitle className="flex items-center gap-2 text-lg font-semibold text-white"><Sparkles className="h-5 w-5 text-blue-400" /> Smart Assist</SheetTitle>
                  <SheetDescription className="text-gray-400">Ask any question about your properties, jobs, or expenses!</SheetDescription>
                </SheetHeader>
                <div className="flex-1 overflow-y-auto mb-4 space-y-4 bg-gray-800 rounded p-4">
                  {smartAssistChat.length === 0 && (
                    <div className="text-gray-400 text-sm">Ask any question about your properties, jobs, or expenses!</div>
                  )}
                  {smartAssistChat.map((msg, idx) => (
                    <div key={idx} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                      <div className={`rounded-lg px-4 py-2 max-w-[80%] ${msg.role === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-blue-200'}`}>
                        {msg.content}
                  </div>
                </div>
                  ))}
                </div>
                <div className="flex gap-2 p-4 border-t border-gray-700 bg-gray-900">
                  <Input
                    className="bg-gray-800 border-gray-600 text-white flex-1"
                    placeholder="Ask a question..."
                    value={smartAssistInput}
                    onChange={e => setSmartAssistInput(e.target.value)}
                    onKeyDown={e => { if (e.key === 'Enter') handleSmartAssistSend(); }}
                  />
                  <Button className="bg-blue-600 hover:bg-blue-700 text-white" onClick={handleSmartAssistSend}>
                    <Send className="h-4 w-4 mr-1" /> Ask
                  </Button>
                          </div>
              </SheetContent>
            </Sheet>

            {/* New Work Order Dialog */}
            <Dialog open={newJobDialogOpen} onOpenChange={setNewJobDialogOpen}>
              <DialogContent className="bg-gray-900 border-gray-700 text-white max-w-md">
                <DialogHeader>
                  <DialogTitle>New Work Order</DialogTitle>
                  <DialogDescription className="text-gray-400">
                    Fill out the details to create a new work order.
                  </DialogDescription>
                </DialogHeader>
                      <div className="space-y-4">
                  {/* Property Dropdown */}
                  <div>
                    <Label className="text-gray-300">Property</Label>
                    <Select
                      value={newWorkOrder.property}
                      onValueChange={value => setNewWorkOrder(prev => ({ ...prev, property: value }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-full">
                        <SelectValue placeholder="Select property" />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        {properties.map(property => (
                          <SelectItem key={property.id} value={property.name} className="bg-gray-900 text-white">
                            {property.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    {formErrors.property && <div className="text-red-400 text-xs mt-1">{formErrors.property}</div>}
                              </div>
                  {/* Work Order Name */}
                  <div>
                    <Label className="text-gray-300">Work Order Name</Label>
                    <Input
                      className="bg-gray-800 border-gray-600 text-white w-full"
                      placeholder="Enter work order name/description"
                      value={newWorkOrder.description}
                      onChange={e => setNewWorkOrder(prev => ({ ...prev, description: e.target.value }))}
                    />
                    {formErrors.description && <div className="text-red-400 text-xs mt-1">{formErrors.description}</div>}
                            </div>
                  {/* Estimated Cost Dropdown */}
                  <div>
                    <Label className="text-gray-300">Estimated Cost</Label>
                    <Select
                      value={newWorkOrder.cost ? (Number(newWorkOrder.cost) >= 1000 ? '1000+' : '<1000') : ''}
                      onValueChange={value => setNewWorkOrder(prev => ({ ...prev, cost: value === '1000+' ? '1000' : '999' }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-full">
                        <SelectValue placeholder="Select estimated cost" />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="<1000" className="bg-gray-900 text-white">Less than $1,000</SelectItem>
                        <SelectItem value="1000+" className="bg-gray-900 text-white">$1,000 or more</SelectItem>
                      </SelectContent>
                    </Select>
                    {formErrors.cost && <div className="text-red-400 text-xs mt-1">{formErrors.cost}</div>}
                  </div>
                  {/* Priority Dropdown */}
                  <div>
                    <Label className="text-gray-300">Priority</Label>
                    <Select
                      value={newWorkOrder.priority}
                      onValueChange={value => setNewWorkOrder(prev => ({ ...prev, priority: value }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-full">
                        <SelectValue placeholder="Select priority" />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="Low" className="bg-gray-900 text-white">Low</SelectItem>
                        <SelectItem value="Medium" className="bg-gray-900 text-white">Medium</SelectItem>
                        <SelectItem value="High" className="bg-gray-900 text-white">High</SelectItem>
                      </SelectContent>
                    </Select>
                    {formErrors.priority && <div className="text-red-400 text-xs mt-1">{formErrors.priority}</div>}
                  </div>
                </div>
                <DialogFooter className="mt-4">
                              <Button
                    className="bg-blue-600 hover:bg-blue-700 text-white"
                    onClick={handleCreateWorkOrder}
                  >
                    Create Work Order
                              </Button>
                              <Button
                                variant="outline"
                    className="border-gray-600 text-gray-300"
                    onClick={() => setNewJobDialogOpen(false)}
                  >
                    Cancel
                              </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            {/* Edit Work Order Dialog */}
            <Dialog open={editJobDialogOpen} onOpenChange={setEditJobDialogOpen}>
              <DialogContent className="bg-gray-900 border-gray-700 text-white max-w-md">
                <DialogHeader>
                  <DialogTitle>Edit Work Order</DialogTitle>
                  <DialogDescription className="text-gray-400">
                    Update the details for this work order.
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  {/* Property Dropdown */}
                  <div>
                    <Label className="text-gray-300">Property</Label>
                    <Select
                      value={editJobForm.property}
                      onValueChange={value => setEditJobForm(prev => ({ ...prev, property: value }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-full">
                        <SelectValue placeholder="Select property" />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        {properties.map(property => (
                          <SelectItem key={property.id} value={property.name} className="bg-gray-900 text-white">
                            {property.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                      </div>
                  {/* Work Order Name */}
                          <div>
                    <Label className="text-gray-300">Work Order Name</Label>
                    <Input
                      className="bg-gray-800 border-gray-600 text-white w-full"
                      placeholder="Enter work order name/description"
                      value={editJobForm.description}
                      onChange={e => setEditJobForm(prev => ({ ...prev, description: e.target.value }))}
                    />
                            </div>
                  {/* Estimated Cost Dropdown */}
                          <div>
                    <Label className="text-gray-300">Estimated Cost</Label>
                    <Select
                      value={editJobForm.cost ? (Number(editJobForm.cost) >= 1000 ? '1000+' : '<1000') : ''}
                      onValueChange={value => setEditJobForm(prev => ({ ...prev, cost: value === '1000+' ? '1000' : '999' }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-full">
                        <SelectValue placeholder="Select estimated cost" />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="<1000" className="bg-gray-900 text-white">Less than $1,000</SelectItem>
                        <SelectItem value="1000+" className="bg-gray-900 text-white">$1,000 or more</SelectItem>
                      </SelectContent>
                    </Select>
                            </div>
                  {/* Priority Dropdown */}
                          <div>
                    <Label className="text-gray-300">Priority</Label>
                    <Select
                      value={editJobForm.priority}
                      onValueChange={value => setEditJobForm(prev => ({ ...prev, priority: value }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white w-full">
                        <SelectValue placeholder="Select priority" />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="Low" className="bg-gray-900 text-white">Low</SelectItem>
                        <SelectItem value="Medium" className="bg-gray-900 text-white">Medium</SelectItem>
                        <SelectItem value="High" className="bg-gray-900 text-white">High</SelectItem>
                      </SelectContent>
                    </Select>
                            </div>
                          </div>
                <DialogFooter className="mt-4">
                        <Button 
                    className="bg-blue-600 hover:bg-blue-700 text-white"
                    onClick={handleUpdateWorkOrder}
                    disabled={!editJobForm.property || !editJobForm.description}
                  >
                    Update Work Order
                        </Button>
                        <Button 
                          variant="outline" 
                    className="border-gray-600 text-gray-300"
                    onClick={() => setEditJobDialogOpen(false)}
                  >
                    Cancel
                        </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            {/* New Expense Dialog */}
            <Dialog open={newExpenseDialogOpen} onOpenChange={setNewExpenseDialogOpen}>
              <DialogContent className="bg-gray-900 border-gray-700 text-white max-w-md">
                <DialogHeader>
                  <DialogTitle>Add New Expense</DialogTitle>
                  <DialogDescription className="text-gray-400">
                    Enter the details for the new expense. It will be added to the "Needs Review" table.
                  </DialogDescription>
                </DialogHeader>
                        <div className="space-y-4">
                  <div>
                    <Label className="text-gray-300">Merchant</Label>
                    <Input 
                      className="bg-gray-800 border-gray-600 text-white" 
                      value={mainExpenseForm.vendor} 
                      onChange={e => setMainExpenseForm(f => ({ ...f, vendor: e.target.value }))} 
                      placeholder="Merchant name" 
                    />
                                  </div>
                  <div>
                    <Label className="text-gray-300">Amount</Label>
                    <Input 
                      className="bg-gray-800 border-gray-600 text-white" 
                      type="number" 
                      value={mainExpenseForm.amount} 
                      onChange={e => setMainExpenseForm(f => ({ ...f, amount: e.target.value }))} 
                      placeholder="Amount" 
                    />
                                    </div>
                  <div>
                    <Label className="text-gray-300">Made By</Label>
                    <Input 
                      className="bg-gray-800 border-gray-600 text-white" 
                      value={mainExpenseForm.madeBy} 
                      onChange={e => setMainExpenseForm(f => ({ ...f, madeBy: e.target.value }))} 
                      placeholder="Name" 
                    />
                                  </div>
                  <div>
                    <Label className="text-gray-300">Billable</Label>
                    <Select value={mainExpenseForm.billable ? 'yes' : 'no'} onValueChange={v => setMainExpenseForm(f => ({ ...f, billable: v === 'yes' }))}>
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="yes">Yes</SelectItem>
                        <SelectItem value="no">No</SelectItem>
                      </SelectContent>
                    </Select>
                                </div>
                  <div>
                    <Label className="text-gray-300">Memo</Label>
                    <Input 
                      className="bg-gray-800 border-gray-600 text-white" 
                      value={mainExpenseForm.memo} 
                      onChange={e => setMainExpenseForm(f => ({ ...f, memo: e.target.value }))} 
                      placeholder="Memo" 
                    />
                              </div>
                  <div>
                    <Label className="text-gray-300">Receipt</Label>
                    <Input 
                                    className="bg-gray-800 border-gray-600 text-white"
                      type="file" 
                      onChange={e => setMainExpenseForm(f => ({ ...f, receipt: e.target.files?.[0]?.name || '' }))} 
                    />
                    {mainExpenseForm.receipt && <span className="text-xs text-green-400">{mainExpenseForm.receipt}</span>}
                  </div>
                </div>
                <DialogFooter>
                  <Button variant="outline" onClick={() => setNewExpenseDialogOpen(false)} className="border-gray-600 text-gray-300">
                    Cancel
                  </Button>
                                    <Button
                    className="bg-blue-600 hover:bg-blue-700" 
                    disabled={!mainExpenseForm.vendor || !mainExpenseForm.amount || !mainExpenseForm.madeBy} 
                                      onClick={() => {
                      // Add new expense to transactions with pending status
                      const newExpense: Transaction = {
                        id: `txn-${Date.now()}`,
                        date: new Date().toISOString().split('T')[0],
                        vendor: mainExpenseForm.vendor,
                        amount: Number(mainExpenseForm.amount),
                        status: 'pending',
                        billable: mainExpenseForm.billable,
                        jobId: '', // No job assigned initially
                        madeBy: mainExpenseForm.madeBy,
                        memo: mainExpenseForm.memo,
                        receipt: mainExpenseForm.receipt
                      };
                      
                      setTransactions(prev => [...prev, newExpense]);
                      setNewExpenseDialogOpen(false);
                      setMainExpenseForm({ vendor: '', amount: '', madeBy: '', billable: true, memo: '', receipt: '' });
                    }}
                  >
                    Add Expense
                                    </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            {/* Transaction Details Dialog */}
            <Dialog open={transactionDetailsOpen} onOpenChange={setTransactionDetailsOpen}>
              <DialogContent className="bg-gray-900 border-gray-700 text-white max-w-md">
                <DialogHeader>
                  <DialogTitle>Transaction Details</DialogTitle>
                  <DialogDescription className="text-gray-400">
                    View the details for this transaction.
                  </DialogDescription>
                </DialogHeader>
                {selectedTransaction ? (
                  <div className="space-y-2">
                    <div><b>Date:</b> {selectedTransaction.date}</div>
                    <div><b>Merchant:</b> {selectedTransaction.vendor}</div>
                    <div><b>Amount:</b> ${selectedTransaction.amount.toFixed(2)}</div>
                    <div><b>Made By:</b> {selectedTransaction.madeBy}</div>
                    <div><b>Status:</b> {selectedTransaction.status}</div>
                    <div><b>Billable:</b> {selectedTransaction.billable ? 'Yes' : 'No'}</div>
                    <div><b>Memo:</b> {selectedTransaction.memo || '-'}</div>
                    <div><b>Receipt:</b> {selectedTransaction.receipt ? (
                      <a
                        href={`/receipts/${selectedTransaction.receipt}`}
                        download
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-400 underline hover:text-blue-200"
                      >
                        Download Receipt
                      </a>
                    ) : (
                      '-'
                    )}
                                  </div>
                                </div>
                ) : (
                  <div>No transaction selected.</div>
                )}
              </DialogContent>
            </Dialog>

            {/* New Transaction Dialog - Central Office Only */}
            <Dialog open={newTransactionDialogOpen} onOpenChange={setNewTransactionDialogOpen}>
              <DialogContent className="bg-gray-900 border-gray-700 text-white max-w-2xl">
                <DialogHeader>
                  <DialogTitle>Add New Transaction</DialogTitle>
                  <DialogDescription className="text-gray-400">
                    Manually add a new transaction to the system.
                  </DialogDescription>
                </DialogHeader>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-gray-300">Date</Label>
                    <Input
                      type="date"
                      className="bg-gray-800 border-gray-600 text-white"
                      value={newTransactionForm.date}
                      onChange={e => setNewTransactionForm(prev => ({ ...prev, date: e.target.value }))}
                    />
                                  </div>
                  <div>
                    <Label className="text-gray-300">Vendor/Merchant</Label>
                    <Input
                      className="bg-gray-800 border-gray-600 text-white"
                      value={newTransactionForm.vendor}
                      onChange={e => setNewTransactionForm(prev => ({ ...prev, vendor: e.target.value }))}
                      placeholder="Merchant name"
                    />
                                </div>
                  <div>
                    <Label className="text-gray-300">Amount</Label>
                    <Input
                      type="number"
                      step="0.01"
                      className="bg-gray-800 border-gray-600 text-white"
                      value={newTransactionForm.amount}
                      onChange={e => setNewTransactionForm(prev => ({ ...prev, amount: e.target.value }))}
                      placeholder="0.00"
                    />
                            </div>
                  <div>
                    <Label className="text-gray-300">Made By</Label>
                    <Input
                      className="bg-gray-800 border-gray-600 text-white"
                      value={newTransactionForm.madeBy}
                      onChange={e => setNewTransactionForm(prev => ({ ...prev, madeBy: e.target.value }))}
                      placeholder="Person name"
                    />
                        </div>
                  <div>
                    <Label className="text-gray-300">Card Holder</Label>
                    <Input
                      className="bg-gray-800 border-gray-600 text-white"
                      value={newTransactionForm.cardHolder}
                      onChange={e => setNewTransactionForm(prev => ({ ...prev, cardHolder: e.target.value }))}
                      placeholder="Card holder name"
                    />
                </div>
                  <div>
                    <Label className="text-gray-300">Property</Label>
                    <Select
                      value={newTransactionForm.property}
                      onValueChange={value => setNewTransactionForm(prev => ({ ...prev, property: value }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                        <SelectValue placeholder="Select property" />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        {properties.map(property => (
                          <SelectItem key={property.id} value={property.name} className="bg-gray-900 text-white">
                            {property.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
              </div>
                  <div>
                    <Label className="text-gray-300">Work Order (Optional)</Label>
                    <Select
                      value={newTransactionForm.job}
                      onValueChange={value => setNewTransactionForm(prev => ({ ...prev, job: value }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                        <SelectValue placeholder="Select work order" />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="none" className="bg-gray-900 text-white">No work order</SelectItem>
                        {jobs.map(job => (
                          <SelectItem key={job.id} value={job.id} className="bg-gray-900 text-white">
                            {job.description}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    </div>
                  <div>
                    <Label className="text-gray-300">Billable</Label>
                    <Select
                      value={newTransactionForm.billable ? 'yes' : 'no'}
                      onValueChange={value => setNewTransactionForm(prev => ({ ...prev, billable: value === 'yes' }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="yes" className="bg-gray-900 text-white">Yes</SelectItem>
                        <SelectItem value="no" className="bg-gray-900 text-white">No</SelectItem>
                      </SelectContent>
                    </Select>
            </div>
                  <div className="col-span-2">
                    <Label className="text-gray-300">Memo</Label>
                    <Input
                      className="bg-gray-800 border-gray-600 text-white"
                      value={newTransactionForm.memo}
                      onChange={e => setNewTransactionForm(prev => ({ ...prev, memo: e.target.value }))}
                      placeholder="Transaction description/memo"
                    />
                </div>
                  <div className="col-span-2">
                    <Label className="text-gray-300">Receipt</Label>
                    <Input
                      type="file"
                      accept="image/*,application/pdf"
                      className="bg-gray-800 border-gray-600 text-white"
                      onChange={e => {
                        const file = e.target.files?.[0];
                        setNewTransactionForm(prev => ({ ...prev, receipt: file ? file.name : '' }));
                      }}
                    />
                    {newTransactionForm.receipt && (
                      <span className="text-xs text-green-400 mt-1">{newTransactionForm.receipt}</span>
                    )}
                </div>
                </div>
                <DialogFooter className="mt-4">
                  <Button
                    className="bg-green-600 hover:bg-green-700 text-white"
                    onClick={handleCreateNewTransaction}
                    disabled={!newTransactionForm.date || !newTransactionForm.vendor || !newTransactionForm.amount || !newTransactionForm.madeBy || !newTransactionForm.cardHolder || !newTransactionForm.property || !newTransactionForm.memo}
                  >
                    Create Transaction
                  </Button>
                  <Button
                    variant="outline"
                    className="border-gray-600 text-gray-300"
                    onClick={() => setNewTransactionDialogOpen(false)}
                  >
                    Cancel
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            {/* Edit Transaction Dialog - Central Office Only */}
            <Dialog open={editTransactionDialogOpen} onOpenChange={setEditTransactionDialogOpen}>
              <DialogContent className="bg-gray-900 border-gray-700 text-white max-w-2xl">
                <DialogHeader>
                  <DialogTitle>Edit Transaction</DialogTitle>
                  <DialogDescription className="text-gray-400">
                    Edit the details of this transaction.
                  </DialogDescription>
                </DialogHeader>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-gray-300">Date</Label>
                    <Input
                      type="date"
                      className="bg-gray-800 border-gray-600 text-white"
                      value={editTransactionForm.date}
                      onChange={e => setEditTransactionForm(prev => ({ ...prev, date: e.target.value }))}
                    />
                        </div>
                        <div>
                    <Label className="text-gray-300">Vendor/Merchant</Label>
                    <Input
                      className="bg-gray-800 border-gray-600 text-white"
                      value={editTransactionForm.vendor}
                      onChange={e => setEditTransactionForm(prev => ({ ...prev, vendor: e.target.value }))}
                      placeholder="Merchant name"
                    />
                        </div>
                  <div>
                    <Label className="text-gray-300">Amount</Label>
                    <Input
                      type="number"
                      step="0.01"
                      className="bg-gray-800 border-gray-600 text-white"
                      value={editTransactionForm.amount}
                      onChange={e => setEditTransactionForm(prev => ({ ...prev, amount: e.target.value }))}
                      placeholder="0.00"
                    />
                      </div>
                  <div>
                    <Label className="text-gray-300">Made By</Label>
                    <Input
                      className="bg-gray-800 border-gray-600 text-white"
                      value={editTransactionForm.madeBy}
                      onChange={e => setEditTransactionForm(prev => ({ ...prev, madeBy: e.target.value }))}
                      placeholder="Person name"
                    />
                        </div>
                  <div>
                    <Label className="text-gray-300">Card Holder</Label>
                    <Input
                      className="bg-gray-800 border-gray-600 text-white"
                      value={editTransactionForm.cardHolder}
                      onChange={e => setEditTransactionForm(prev => ({ ...prev, cardHolder: e.target.value }))}
                      placeholder="Card holder name"
                    />
                        </div>
                  <div>
                    <Label className="text-gray-300">Property</Label>
                    <Select
                      value={editTransactionForm.property}
                      onValueChange={value => setEditTransactionForm(prev => ({ ...prev, property: value }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                        <SelectValue placeholder="Select property" />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        {properties.map(property => (
                          <SelectItem key={property.id} value={property.name} className="bg-gray-900 text-white">
                            {property.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                        </div>
                  <div>
                    <Label className="text-gray-300">Work Order (Optional)</Label>
                    <Select
                      value={editTransactionForm.job}
                      onValueChange={value => setEditTransactionForm(prev => ({ ...prev, job: value }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                        <SelectValue placeholder="Select work order" />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="none" className="bg-gray-900 text-white">No work order</SelectItem>
                        {jobs.map(job => (
                          <SelectItem key={job.id} value={job.id} className="bg-gray-900 text-white">
                            {job.description}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                        </div>
                  <div>
                    <Label className="text-gray-300">Billable</Label>
                    <Select
                      value={editTransactionForm.billable ? 'yes' : 'no'}
                      onValueChange={value => setEditTransactionForm(prev => ({ ...prev, billable: value === 'yes' }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="yes" className="bg-gray-900 text-white">Yes</SelectItem>
                        <SelectItem value="no" className="bg-gray-900 text-white">No</SelectItem>
                      </SelectContent>
                    </Select>
                        </div>
                  <div className="col-span-2">
                    <Label className="text-gray-300">Memo</Label>
                    <Input
                      className="bg-gray-800 border-gray-600 text-white"
                      value={editTransactionForm.memo}
                      onChange={e => setEditTransactionForm(prev => ({ ...prev, memo: e.target.value }))}
                      placeholder="Transaction description/memo"
                    />
                      </div>
                  <div className="col-span-2">
                    <Label className="text-gray-300">Receipt</Label>
                    <Input
                      type="file"
                      accept="image/*,application/pdf"
                      className="bg-gray-800 border-gray-600 text-white"
                      onChange={e => {
                        const file = e.target.files?.[0];
                        setEditTransactionForm(prev => ({ ...prev, receipt: file ? file.name : '' }));
                      }}
                    />
                    {editTransactionForm.receipt && (
                      <span className="text-xs text-green-400 mt-1">{editTransactionForm.receipt}</span>
                    )}
                        </div>
                        </div>
                <DialogFooter className="mt-4">
                  <Button
                    className="bg-blue-600 hover:bg-blue-700 text-white"
                    onClick={handleUpdateTransaction}
                    disabled={!editTransactionForm.date || !editTransactionForm.vendor || !editTransactionForm.amount || !editTransactionForm.madeBy || !editTransactionForm.cardHolder || !editTransactionForm.property || !editTransactionForm.memo}
                  >
                    Update Transaction
                  </Button>
                  <Button
                    variant="outline"
                    className="border-gray-600 text-gray-300"
                    onClick={() => setEditTransactionDialogOpen(false)}
                  >
                    Cancel
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            {/* Add New Question Dialog - Policy Tab */}
            <Dialog open={newQuestionDialogOpen} onOpenChange={setNewQuestionDialogOpen}>
              <DialogContent className="bg-gray-900 border-gray-700 text-white">
                <DialogHeader>
                  <DialogTitle>Add New Expense Question</DialogTitle>
                  <DialogDescription className="text-gray-400">
                    Add a new question to the expense decision tracker.
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  <div>
                    <Label className="text-gray-300">Question</Label>
                    <Textarea
                      className="bg-gray-800 border-gray-600 text-white"
                      value={newQuestion.question}
                      onChange={e => setNewQuestion(prev => ({ ...prev, question: e.target.value }))}
                      placeholder="Enter the expense question..."
                      rows={3}
                    />
                          </div>
                  <div>
                    <Label className="text-gray-300">Category</Label>
                    <Select
                      value={newQuestion.category}
                      onValueChange={value => setNewQuestion(prev => ({ ...prev, category: value }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="General" className="bg-gray-900 text-white">General</SelectItem>
                        <SelectItem value="Categorization" className="bg-gray-900 text-white">Categorization</SelectItem>
                        <SelectItem value="Documentation" className="bg-gray-900 text-white">Documentation</SelectItem>
                        <SelectItem value="Approval" className="bg-gray-900 text-white">Approval</SelectItem>
                        <SelectItem value="Emergency" className="bg-gray-900 text-white">Emergency</SelectItem>
                      </SelectContent>
                    </Select>
                          </div>
                          </div>
                <DialogFooter className="mt-4">
                  <Button
                    className="bg-green-600 hover:bg-green-700 text-white"
                    onClick={() => {
                      if (newQuestion.question.trim()) {
                        setExpenseQuestions(prev => [
                          ...prev,
                          {
                            id: Math.max(...prev.map(q => q.id)) + 1,
                            question: newQuestion.question.trim(),
                            answer: null,
                            category: newQuestion.category
                          }
                        ]);
                        setNewQuestion({ question: '', category: 'General' });
                        setNewQuestionDialogOpen(false);
                      }
                    }}
                    disabled={!newQuestion.question.trim()}
                  >
                    Add Question
                  </Button>
                  <Button
                    variant="outline"
                    className="border-gray-600 text-gray-300"
                    onClick={() => {
                      setNewQuestion({ question: '', category: 'General' });
                      setNewQuestionDialogOpen(false);
                    }}
                  >
                    Cancel
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            {/* Help Request Dialog - Technician to Central Office */}
            <Dialog open={helpRequestDialogOpen} onOpenChange={setHelpRequestDialogOpen}>
              <DialogContent className="bg-gray-900 border-gray-700 text-white max-w-2xl">
                <DialogHeader>
                  <DialogTitle>Ask Central Office for Help</DialogTitle>
                  <DialogDescription className="text-gray-400">
                    Submit a question about expense policies or categorization. The central office will review and respond.
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                          <div>
                    <Label className="text-gray-300">Related Expense (Optional)</Label>
                    <Select
                      value={helpRequestForm.expenseId}
                      onValueChange={value => setHelpRequestForm(prev => ({ ...prev, expenseId: value }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                        <SelectValue placeholder="Select an expense (optional)" />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="none" className="bg-gray-900 text-white">No specific expense</SelectItem>
                        {[...transactions, ...technicianTransactions]
                          .filter(txn => txn.cardHolder === technicianName)
                          .map(txn => (
                            <SelectItem key={txn.id} value={txn.id} className="bg-gray-900 text-white">
                              {txn.date} - {txn.vendor} - ${txn.amount.toFixed(2)}
                            </SelectItem>
                          ))}
                      </SelectContent>
                    </Select>
                          </div>
                          <div>
                    <Label className="text-gray-300">Your Question *</Label>
                    <Textarea
                      className="bg-gray-800 border-gray-600 text-white"
                      value={helpRequestForm.question}
                      onChange={e => setHelpRequestForm(prev => ({ ...prev, question: e.target.value }))}
                      placeholder="What would you like to ask about this expense or expense policy?"
                      rows={4}
                    />
                          </div>
                          <div>
                    <Label className="text-gray-300">Urgency Level</Label>
                    <Select
                      value={helpRequestForm.urgency}
                      onValueChange={value => setHelpRequestForm(prev => ({ ...prev, urgency: value as 'low' | 'normal' | 'high' }))}
                    >
                      <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-gray-900 border-gray-700 text-white">
                        <SelectItem value="low" className="bg-gray-900 text-white">Low - General question</SelectItem>
                        <SelectItem value="normal" className="bg-gray-900 text-white">Normal - Need guidance</SelectItem>
                        <SelectItem value="high" className="bg-gray-900 text-white">High - Urgent decision needed</SelectItem>
                      </SelectContent>
                    </Select>
                          </div>
                          <div>
                    <Label className="text-gray-300">Additional Details</Label>
                    <Textarea
                      className="bg-gray-800 border-gray-600 text-white"
                      value={helpRequestForm.additionalDetails}
                      onChange={e => setHelpRequestForm(prev => ({ ...prev, additionalDetails: e.target.value }))}
                      placeholder="Any additional context or details that might help..."
                      rows={3}
                    />
                          </div>
                        </div>
                <DialogFooter className="mt-4">
                  <Button
                    className="bg-green-600 hover:bg-green-700 text-white"
                    onClick={() => {
                      if (helpRequestForm.question.trim()) {
                        const newRequest = {
                          id: `help_${Date.now()}`,
                          expenseId: helpRequestForm.expenseId,
                          technicianName: technicianName,
                          question: helpRequestForm.question.trim(),
                          urgency: helpRequestForm.urgency,
                          additionalDetails: helpRequestForm.additionalDetails,
                          status: 'pending' as const,
                          createdAt: new Date().toISOString()
                        };
                        setHelpRequests(prev => [newRequest, ...prev]);
                        setHelpRequestForm({
                          expenseId: 'none',
                          question: '',
                          urgency: 'normal',
                          additionalDetails: ''
                        });
                        setHelpRequestDialogOpen(false);
                      }
                    }}
                    disabled={!helpRequestForm.question.trim()}
                  >
                    Submit Help Request
                  </Button>
                  <Button
                    variant="outline"
                    className="border-gray-600 text-gray-300"
                    onClick={() => {
                      setHelpRequestForm({
                        expenseId: 'none',
                        question: '',
                        urgency: 'normal',
                        additionalDetails: ''
                      });
                      setHelpRequestDialogOpen(false);
                    }}
                  >
                    Cancel
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            {/* Help Request Response Dialog - Central Office Response */}
            <Dialog open={responseDialogOpen} onOpenChange={setResponseDialogOpen}>
              <DialogContent className="bg-gray-900 border-gray-700 text-white max-w-4xl max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>Respond to Help Request</DialogTitle>
                  <DialogDescription className="text-gray-400">
                    Review the technician's question and provide guidance using the decision tracker.
                  </DialogDescription>
                </DialogHeader>
                
                {selectedHelpRequest && (
                  <div className="space-y-6">
                    {/* Original Question */}
                    <div className="bg-gray-800 p-4 rounded-lg">
                      <h4 className="text-lg font-semibold text-white mb-2">Question from {selectedHelpRequest.technicianName}</h4>
                      <div className="text-gray-300 mb-2">{selectedHelpRequest.question}</div>
                      {selectedHelpRequest.additionalDetails && (
                        <div className="text-sm text-gray-400">
                          <strong>Additional Details:</strong> {selectedHelpRequest.additionalDetails}
                        </div>
                      )}
                      </div>
                          </div>
                        </div>
                          </div>
  )
}
